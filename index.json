[{"content":"GINsim 3.0 is freely available without guarantees. Please contact us for training, other support or dedicated development. The GINsim website provides the latest official version of the software, documentation, as well as a model library.\nGINsim 3.0 requires Java 8. You can obtain Java for Linux, Windows, Mac OSX, and Solaris at http://www.java.com. Note that Apple used to provide its own Java version, newer versions are not supported on OSX 10.6 and older.\nSome features of GINsim rely on external tools, such as the NuSMV model checker.\nRunning GINsim Once you have obtained GINsim, you can launch it by double-click or with the command java -jar GINsim.jar.\nThe following options are available for GINsim:\n file: open file on startup (skip the ). -n: start with a new regulatory graph (skip the ). -h: help message. -s: run GINsim in script mode -lm : Let the bioLQM library parse the command line arguments. --dev : enables some experimental features still in under development. -py : launch a server for the py4j python gateway (used for scripting in the Python Notebook).  Furthermore, the JAVA virtual machine provides many options, in particular GINsim can benefit from extending the amount of memory available, with the -Xmx option. For example, one can launch GINsim with 1000MB of memory using java -Xmm1000M -jar GINsim.jar.\n","id":0,"section":"doc","summary":"Availability, requirements, first run","tags":null,"title":"Install and Run GINsim","uri":"/doc/installation/"},{"content":"Regulatory graphs can be interactively modified: components and interactions can be added, edited and removed. The interaction with the graph view is controled by an editing mode selected through the following buttons available on the toolbar on the top:\nAvailable editing modes for regulatory graphs:\n  Default editing mode: allows to select and move objects.\n  Component insertion mode: when selected, clicking on the graph panel adds a new component.\n  Interaction insertion mode: when selected, interactions are added by first selecting one component and dragging the selection to (the same or) another component. The interactions must be complemented by the definition of the logical parameters for the target variable (see below). The four buttons allow to add different types of interactions: activation, inhibition, dual or undefined.\n  Deletion option: selected items (components or interactions) are deleted.\n  Component order In GINsim, components are internally ordered. This order has no effect on the regulatory graph itself, but it has a direct effect on the internal representation of the logical parameters, with possible effects on (partial) simulation. The default order follows the node addition chronology, which can be modified by selecting a (set of) node(s) and using the Up/Down arrows on the left side of the Modelling Attributes tab. This change of order will have an effect throughout GINsim, e.g. in the state transition graph, since the same order is used in the states names.\n  Changing component orderThe left part of the Modelling Attributes tab of a regulatory graph lists all components of the model and allows to modify their order. The \u0026ldquo;up\u0026rdquo; and \u0026ldquo;down\u0026rdquo; buttons move selected components in the list.\n  The selection of several components, can be achieved (like in all lists) by using the Ctrl key (apple/Cmd key on Mac OS X) or Shift key, while selecting the nodes. Component attributes When a single component is selected, the Modelling Attributes tab allows to define its properties:\n Id: component\u0026rsquo;s identifier. It appears in the graph\tand it must be unique. Name: component\u0026rsquo;s long name (optional). Input: mark a component as an input node, i.e., cannot have regulators. Max: the maximal expression level of the component. The default value is 1 (Boolean case). It can be augmented to generate multi-valued components. Logical parameters: define the rules controlling the dynamical evolution of the expression level depending on the active incoming interactions.    Attributes of a componentProperties of the gene Cro, as defined in the lambda4 model.\n  The Modelling Attributes tab is divided into three parts. The combobox selection list (bottom left) permits to select :doc:annotations, as well as :doc:rules . Interactions When a single interaction arc is selected, the Modelling Attributes tab allows to define its properties.\n  Properties of an interaction arcProperties of the Cro-N interaction in the lambda4 model.\n  Depending on a component\u0026rsquo;s activity level, different effects might occur on another component. These different effects are controled by the definition of different ranges listed on the left.\n  The \u0026ldquo;+\u0026rdquo; button creates an additional interaction range.\n  The \u0026ldquo;-\u0026rdquo; button deletes the selected interaction range.\n  Properties of the selected interaction range can be defined:\n Threshold defines the lower bound of the selected interaction range. The interaction becomes active when the activity level of its source component is in this range. Sign: each interaction range can be labelled with activation, inhibition, dual or unknown. However, this is only a visual hint, as the real effects of interactions are defined through :doc:rules.    Model integrity GINsim keeps the definition of regulatory graphs consistent, which means that:\n When an interaction is deleted, all :doc:rules in which it was involved are also deleted. When the max value of a node is decreased, interactions and logical parameters are checked and, if necessary, updated accordingly and silently to avoid inconsistencies.  Since such changes have automatic repercussions on the model parameters and interaction ranges to keep the model valid, keep in mind that you need to double-check parameters after performing such changes.\nChecking activation intervals of interactions and the correctness of logical parameters is left to the user as adding more controls generates more annoyances than real help. Invalid logical parameters are highlighted to ease their detection. Keep in mind that a change in the activation-range of one of the interactions can turn a valid logical parameter into an ill-defined one. Parameters involving interactions from the same source with disjoint activity ranges are also ill-defined and thus highlighted for correction.\n","id":1,"section":"doc","summary":"The components and interactions composing the regulatory graph","tags":null,"title":"Struture of the LRG","uri":"/doc/lrg/structure/"},{"content":"The dynamical behaviour of regulatory components depends on their regulators, but the precise rules governing them must be explicitly defined. In GINsim, these rules can be defined either as logical parameters, or as logical functions. These two alternatives are described below.\nLogical parameters A logical parameter corresponds to a single entry (line) in the truthtable of a component. It is defined by a target activity level and a list of active interactions. By default, interactions not present on the list are implicitly considered to be inactive. This means that in order to a given parameter to be effective, all interactions present on the list must be active, and all interactions not present on the list must be inactive.\nWhen a component is selected, logical parameters for this component can be defined in the right part of the Modelling Attribute tab. The panel dedicated to the definition of logical parameters is divided into three parts:\n On the left, a table lists all defined logical parameters, showing their values and related interactions. A central part containing buttons to edit the list of parameters. On the right, a list of all incoming interactions of the selected component.    Definition of non zero parameters for CIThe logical parameter panel, showing all parameters for component CI.\n  To add a new logical parameter, select the empty line in the list of parameters (the last line), select a combination of active interactions on the right part, and click on the left arrow. The new logical parameter will be defined with the default value of 1, this value can be edited though. The specification of logical parameters with target values set to 0 is not needed, since all non-specified logical parameters are implicitly considered to be 0. Adding a parameter with a set of active interactions that is already defined is not permitted.\nThe Up/Down arrows enable the reordering the existing parameters.\nTo remove parameters from the list of active interactions, select them and click on the - button.\nTo modify the active interactions for an exiting parameter, select the corresponding line, then select the correct set of active interactions in the right part, and finally click on the left arrow button to apply the changes.\nIt is not possible to select the Input checkbox whenever a component has incoming interactions.\nSimilarly, if the Input checkbox is selected, logical parameters can not be defined and the component is considered to have an implicit self-activation.\n Logical functions The dynamical behaviour of a given compoenent can also be specified through the use of logical functions. These function are, for certain cases, a more convenient manner to define complex behaviours with many regulators. The definition of a logical function will generate the corresponding logical parameters automatically.\nThe automatically generated logical parameters may overlap with previously generated ones, automatically or manually.   Definition of a logical function for CIThe logical function panel, showing the definition of one logical function at target 1.\n  To define a new logical function, select the Down arrow, specify a target value for the function, and select subsequent Down arrow. You can then press the E button to start editing the logical function (line color changes to green). The after insertion of the logical function press Enter to validate the expression and automatically create the corresponding logical parameters.\nThe parser for logical functions accepts the logical AND and OR with the symbols \u0026amp; and |, respectively. Additionally, you can add parentheses to prioritize logical operations.\n","id":2,"section":"doc","summary":"Logical rules control changes of activity for model components","tags":null,"title":"Dynamical rules","uri":"/doc/lrg/rules/"},{"content":"Annotations can be attached to the different components of the regulatory graph:\n the graph itself, components, interactions.  An annotation is composed of a textual comment and a numbered list of URIs, which can be opened using the [i] buttons on the left side.\n  The annotation panel   The same Annotation panel is used for all elements supporting notes. This screenshot shows the graph annotations, available when the selection is empty.\nSome shortcuts are provided for linking to entries in online databases. For exemple, pubmed:19426782 will open http://www.ncbi.nlm.nih.gov/pubmed/19426782. This relies on the identifiers.org webservice.\n","id":3,"section":"doc","summary":"Annotate regulatory graph elements","tags":null,"title":"Annotations","uri":"/doc/lrg/annotations/"},{"content":"Motivation The Compute interaction functionality tool determines the correct sign of the interactions in a LRG according to the logical rules defined for each node. These rules, are used to compute the conditions for which a given interaction has a dual, positive, negative or no effect.\nUsage The Compute interaction functionality entry on the Tools menu opens the interaction functionality dialog. This dialog first provides the option to select a perturbation to be applied to the model before computing the interaction functionality, and it is divided into three main sections:\n The perturbation selection, where the user can select (and define) perturbations. The save report button, where the user can export a summary table of all the conditions of each interaction into a XHTML file, to be visualised in a browser. The execution options, where the user can run the computation and visualise the colors computed by the method or restore the colors of the original graph.    Example of interaction functionality analysisLeft: The interaction functionality dialog box. Right: The logical regulatory graph, where the sign of the interactions are highlighted.\n  After running the tool, the logical regulatory graph interactions will change colour depending on their function. Their colour code representation will be: green, for interactions having an activatory effect; red, for interactions with an inhibitory effect; blue, for interactions having a dual effect; and black, for non-functional interactions. Additionally, if the user correctly (incorrectly) defined the sign of the interaction, this will be represented in normal (increased) thickness.\nReport The interaction functionality report is saved to a XHTML file which contains:\n A summary table, where for every interaction, it shows the source and target node, the user defined sign and the computed sign. A detailed table, where for every interaction, and for all the valuations of the regulators of the target node, it shows the cases for which the specific interaction is functional.    Example of an functionality context of an interactionFor all the valuations of all regulators of target node gB, the cases for which the interaction gA -\u0026gt; gB is functional are shown.\n  Availability This feature was implemented in GINsim 3.0.\n","id":4,"section":"doc","summary":"Verify the consistency of signed interaction with the logical rules","tags":null,"title":"Interaction functionnality","uri":"/doc/lrg/functionality/"},{"content":"Regulatory circuits play crucial roles in the dynamical behaviour of a system. Indeed, positive circuits are required for the existence of several attractors, whereas negative circuits may generate cyclic attractors [1] .\nMany regulatory graphs currently under study contain a large number of circuits, but a relatively small number of them often plays a more important role. In [ 2 ] , we describe a method to compute a functionality context for all circuits, to determine which circuits are more likely to affect the attractor configuration of the system.\nNote that the functionality contexts identified here give the conditions on the immediate regulators of the circuits under which it is fully effective. These conditions may be impossible to maintain according to the dynamical rules of the model, especially in the case of model perturbations.\nUsage The Circuits Functionality entry of the Action menu opens the circuit analysis dialog. This dialog provides a interface to lookup all circuits in the regulatory graph or a subset of circuits matching some filtering rules (length, involved components).\n  Select regulatory circuits for analysisA first dialog enables to select which circuits will be analysed, by specifying constraints on the length of the circuits or on the involved actors. By default all circuits are considered.\n  The dialog then allows to analyse the selected circuits, it will then show the circuit for which a functionality context was found. The analysis can be repeated for various perturbations.\n  Result of the functionality analysisWhen the analysis is completed, the dialog classifies the selected circuits, according to their computed sign. When a circuit is selected, its functionality context is shown at the bottom of the dialog box.\n  Availability Circuit analysis was implemented in GINsim 2.3\n","id":5,"section":"doc","summary":"Analyse regulatory circuits","tags":null,"title":"Circuit analysis","uri":"/doc/static_analysis/circuits/"},{"content":"This tool allows the analytic (i.e. without running a simulation) determination of stable states of the model. All stable states are determined, regardless of their reachability [1] .\nThis tool allows the analytic (i.e. without running a simulation) determination of trapspaces of the model. These trapspaces contain the stable states, as well as an approximation for complex attractors.\nUsage The stable state identification tool is available from the Compute stable states option of the Tools menu. The stable states dialog box allows to run the analysis after the optional selection of a perturbation. The result is shown in a table in the same dialog box, allowing to launch a novel analysis for another perturbation. A \u0026ldquo;\u0026rdquo; in the table denotes that each of the values of this component gives rise to a stable state (or several if another \u0026ldquo;\u0026rdquo; appears in the same row).\n  Availability Stable state search was first implemented in GINsim 2.3. The implementation is now part of the bioLQM toolkit.\n","id":6,"section":"doc","summary":"Identify fixed points (stable states)","tags":null,"title":"Fixed points","uri":"/doc/static_analysis/fixpoints/"},{"content":"The animation tool is launched through the Animate option of the Action menu of a state transition graph. It allows to interactively follow a trajectory in the state transition graph. Genes of the regulatory graph are highlighted, to display the corresponding activity levels.\n  The animation plugin\n  To follow a trajectory in the state transition graph, select a starting state. It is then colorized in blue and added to the trajectory (listed in the animation dialog box). Its successor states are highlited, and can be added to the trajectory upon selection, which in turns changes the available successor states.\nTo build another trajectory, select a state in the dialog and press the \u0026lt;\u0026lt; button to remove it and all of its successors.\nTo view the defined trajectory, select the starting state and press the |\u0026gt; button.\nTrajectory visualisation with gnuplot A path created with the animation plugin or found by the path finder can be visualized using gnuplot. The \u0026ldquo;GP\u0026rdquo; button (in the path finder and in the animator box) opens the gnuplot export box.\n  Gnuplot export boxThe gnuplot export box enables the selection of the kind of graph to create as well as the genes to display.\n  After selecting the kind of output and the genes to display, click \u0026ldquo;export\u0026rdquo; and choose a place to save the plot. Note that two files are created but only the first file name is prompted for. If this filename is \u0026ldquo;myplot.gnuplot\u0026rdquo;, the second file will then be named \u0026ldquo;myplot.data\u0026rdquo;. The actual graph can then be displayed using the command load \u0026quot;mygraph.gnuplot\u0026quot; at the gnuplot prompt.\n  gnuplot export examplesExamples of the two kinds of gnuplot graphs. The first one uses arrows of different colors to show changes in the expression levels. The second one show separate subgraphs for each gene.\n  ","id":7,"section":"doc","summary":"Animate the model based on its dynamics","tags":null,"title":"Animate transition graphs","uri":"/doc/analyse_tg/animator/"},{"content":"Caulobacter crescentus is a model organism for the study of asymmetric division and cell type differentiation, as its cell division cycle generates a pair of daughter cells that differ from one another in their morphology and behavior. One of these cells (called stalked) develops a structure that allows it to attach to solid surfaces and is the only one capable of dividing, while the other (called swarmer) develops a flagellum that allows it to move in liquid media and divides only after differentiating into a stalked cell type. Although many genes, proteins, and other molecules involved in the asymmetric division exhibited by C. Crescentus have been discovered and characterized during decades, it remains as a challenging task to understand how cell properties arise from the high number of interactions between these molecular components. This chapter describes a modeling approach based on the Boolean logic framework that provides a means for the integration of knowledge and study of the emergence of asymmetric division. The text illustrates how the simulation of simple logic models gives valuable insight into the dynamic behavior of the regulatory and signaling networks driving the emergence of the phenotypes exhibited by C. crescentus. These models provide useful tools for the characterization and analysis of other complex biological networks.\n","id":8,"section":"models","summary":"Caulobacter crescentus is a model organism for the study of asymmetric division and cell type differentiation, as its cell division cycle generates a pair of daughter cells that differ from one another in their morphology and behavior.","tags":null,"title":"Asymmetric Cell Division in Caulobacter Crescentus","uri":"/models/2017-bacterium-asymetric-division/"},{"content":"FIREFRONT \u0026amp; AVATAR are two methods to identify reachable attractors and quantify their likelihoods, i.e. to determine their reachability probabilities (from specific initial conditions or over the whole state space), considering asynchronous dynamics.\nBenchmark models are provided here to permit reproducing results presented in the main text (Table 1) and supplementary material (Table S1). Model files are provided in GINML format, to be open with GINsim.\nModels of Table 1 (main text), Models of Table S1 (suppl. mat)\n","id":9,"section":"suppl","summary":"Estimating attractor reachability in asynchronous logical models","tags":null,"title":"Avatar and Firefront","uri":"/suppl/avatar-firefront/"},{"content":"Altered molecular responses to insulin and growth factors (GF) are responsible for late-life shortening diseases such as type-2 diabetes mellitus (T2DM) and cancers. We have built a network of the signaling pathways that control S-phase entry and a specific type of senescence called geroconversion. We have translated this network into a Boolean model to study possible cell phenotype outcomes under diverse molecular signaling conditions. In the context of insulin resistance, the model was able to reproduce the variations of the senescence level observed in tissues related to T2DM\u0026rsquo;s main morbidity and mortality. Furthermore, by calibrating the pharmacodynamics of mTOR inhibitors, we have been able to reproduce the dose-dependent effect of rapamycin on liver degeneration and lifespan expansion in wild-type and HER2–neu mice. Using the model, we have finally performed an in silico prospective screen of the risk–benefit ratio of rapamycin dosage for healthy lifespan expansion strategies. We present here a comprehensive prognostic and predictive systems biology tool for human aging.\n","id":10,"section":"models","summary":"Altered molecular responses to insulin and growth factors (GF) are responsible for late-life shortening diseases such as type-2 diabetes mellitus (T2DM) and cancers. We have built a network of the signaling pathways that control S-phase entry and a specific type of senescence called geroconversion.","tags":null,"title":"Boolean model of geroconversion","uri":"/models/2016-mammal-geroconversion/"},{"content":"GINsim enables the definition of multi-valued models where some components can have several increasing activity levels. However, some other analysis tools only consider Boolean (on/off) models. Model booleanization allows to convert multi-valued models into Boolean models by mapping each multivalued component on a group of Boolean variables. The resulting Boolean model generates the same dynamical behaviour as the original multivalued model.\nbioLQM uses the mapping originaly proposed by van Ham, in which a component associated with the maximal value m will be mapped on m Boolean components. For example, a component taking the values 0`, 1, 2, and 3will be encoded as000, 100, 110, and 111``.\nThe booleanization introduces many non-admissible states, which may require special care depending on the analysis applied on the booleanized model. This modifier makes sure that a simulation which start with an admissible state will not explore non-admissible states. It also prevents the introduction of non-admissible attractors by making sure that at least one admissible state is reachable from any non-admissible.\nUsage Exporting a multivalued model to a format limited to Boolean components triggers an implicit Booleanization step. This booleanization step can also be performed explicitely using the booleanization tool in the Actions menu.\nAvailability and further reading This method was implemented in GINsim 3.0. The backend is implemented in the bioLQM toolkit, enabling its programmatic use.\n","id":11,"section":"doc","summary":"Boolean mapping for multivalued models","tags":null,"title":"Booleanize models","uri":"/doc/modify/booleanization/"},{"content":"This model is a direct transcription of the Boolean model published by Irons [1] , except for the specific temporisation system. Synchronous simulation of this model recovers the results obtained by Irons in absence of time delays (Fig. 3B in [ 1 ] ), i.e. a single cyclic attractor qualitatively consistent with available kinetic data.\n","id":12,"section":"models","summary":"This model is a direct transcription of the Boolean model published by Irons [1] , except for the specific temporisation system. Synchronous simulation of this model recovers the results obtained by Irons in absence of time delays (Fig.","tags":null,"title":"Budding yeast cell cycle (adapted from Irons, 2009)","uri":"/models/2009-budding-yeast-cell-cycle/"},{"content":"Leaning on former models, we have defined a logical model for three regulatory modules involved in the control of the mitotic cell cycle in budding yeast, namely the core cell cycle module, the morphogenetic checkpoint, and a module controlling the exit from mitosis. Consistency with available data has been assessed through a systematic analysis of model behaviours for various genetic backgrounds and other perturbations.\nHere, we take advantage of compositional facilities of the logical formalism to combine these three models in order to generate a single comprehensive model involving over thirty regulatory components. The resulting logical model preserves all relevant characteristics of the original modules, while enabling the simulation of more sophisticated experiments.\nChen et al (2004) [1] discussed the possibility to graft the model of the morphogenesis checkpoint published in a \u0026ldquo;companion study\u0026rdquo; by Ciliberto et al (2003) [ 2 ] to their model of the cell cycle, and to replace the hypothetical PPX by a more accurate version of the network controlling mitotic exit. We have adapted all three modules in the logical formalism, and coupled them together.\nWe have kept and left unchanged all components that were specific of the MCP module (Mih1, Swe1, Mpk1 and Hsl1), and similarly, all components specific of the core model. Among the components that were shared by both modules, MASS, MBF and the BUD received no input from the variables specific of the MCP, while their regulation amounted to a simplification of what had been proposed in the core cycling engine model. Hence, we kept these variables and their regulation from the core model and left them unchanged in the coupled model. In contrast, in the coupled model, CycB get inputs from components specific of each of the two modules. Moreover, in the MCP module, CycB is Boolean, whereas it is multilevel in the core model. Based on the parameters of CycB in each of the modules, we determined that CycB would have to satisfy the two sets of conditions to be active in the coupled model. Consequently, the logical formula giving the conditions of activation of CycB in the coupled model amounts to a logical AND between its formulas in the core cycling engine and in the MCP module. The main characteristics of the behaviour of the two original modules are conserved in the coupled model, in the case of the wild-type as for the different mutations simulated.\nThe next step was to fuse the exit module to the core cycling engine. We followed the same method as with the coupling of the MCP. The first step was to identify which components and interactions were to be kept in the coupled model. Obviously, we chose to discard the hypothetical PPX, along with the parameters of the components of the exit network that were present in the core model (Net1, Cdc14, Tem1, Bub2-Bfa1, Cdc15 and Pds1), to replace them with their equivalents from the new exit module, including the SeparaseEsp1, PP2ACdc55 and Cdc5Polo that were not present in the core model. The logical rules for Clb2, Cdh1 and Cdc20 in the exit module amount to simplifications of their counterparts in the core model, so we kept the core model wiring and regulation in the coupled model for these components. Last but not least, we added regulation from Sic1 and Cdc6 towards Clb2 new targets to represent sequestration of the cyclins by the CKI (see the core cycling engine model for more details). The resulting model fits the more recent data used to built the exit module, and the behaviour of the core model is preserved. Still, one difficulty arose regarding mutant simulations for the exit module: the two mutants involving Cdk inhibition (see Queralt et al., supplementary figure S6.4 [ 3 ] ) could not be simulated in the coupled model, as inhibition of Cdk1 / Clb2 is the signal for cytokinesis in this model. This points out towards the \u0026ldquo;TARGET model\u0026rdquo; hypothesis discussed in Chen et al, where the trigger for cytokinesis would involve both a decrease of Cdk1/Clb2 kinase activity and an increase in Cdc14 phosphatase activity.\n","id":13,"section":"models","summary":"Leaning on former models, we have defined a logical model for three regulatory modules involved in the control of the mitotic cell cycle in budding yeast, namely the core cell cycle module, the morphogenetic checkpoint, and a module controlling the exit from mitosis.","tags":null,"title":"Budding yeast cell cycle (Fauré et al. 2009)","uri":"/models/2009-budding-yeast-full-cell-cycle/"},{"content":"This model is a direct transcription of the Boolean model published by Orlando et al. [1] . Synchronous simulation of this model yields a cyclic attractor gathering most trajectories in the state transition graph, which is robust to parameter choice. However, asynchronous simulations all lead to a stable state with all variables OFF, whatever the parameter set proposed by the authors, indicating that the oscillations observed in the synchronous simulations may not be sustained.\n","id":14,"section":"models","summary":"This model is a direct transcription of the Boolean model published by Orlando et al. [1] . Synchronous simulation of this model yields a cyclic attractor gathering most trajectories in the state transition graph, which is robust to parameter choice.","tags":null,"title":"Budding yeast cell cycle (Orlando et al. 2008)","uri":"/models/2008-budding-yeast-cell-cycle/"},{"content":"This logical model focuses on the network controlling mitotic exit in budding yeast. It is inspired by the work of Queralt et al. [1] , which emphasises the role of PP2A down-regulation by separase in the triggering of Cdc14 activation during anaphase. These authors developed a quantitative model for mitotic exit, integrating evidence on the roles of FEAR (Cdc Fourteen Early Anaphase Release) components Cdc5Polo, PP2ACdc55 and Esp1.\nThis model was then used to update our model for budding yeast core cycling engine, that relied on an hypothetical inhibitor of Cdc14, called PPX, activated by Pds1, in place of the FEAR reaction. Our logical model qualitatively accounts for available data on the wild-type cell cycle, as well as for nine different cycle perturbations described in Queralt et al, in terms of Cdc14 activation.\n","id":15,"section":"models","summary":"This logical model focuses on the network controlling mitotic exit in budding yeast. It is inspired by the work of Queralt et al. [1] , which emphasises the role of PP2A down-regulation by separase in the triggering of Cdc14 activation during anaphase.","tags":null,"title":"Budding yeast exit module","uri":"/models/2009-budding-yeast-mitosis-exit/"},{"content":"This model accounts for cell fate decision network in the AGS gastric cancer cell line. A set of logical equations has been defined, wich recapitulates AGS data observed in cells in their baseline proliferative state. Using the modeling software GINsim, model reduction and simulation compression techniques were applied to cope with the vast state space of large logical models and enable simulations of pairwise applications of specific signaling inhibitory chemical substances. These simulations predicted synergistic growth inhibitory action of five combinations from a total of 21 possible pairs. All predicted non synergic pairs and four of the predicted synergic ones were confirmed in AGS cell growth real-time assays, including known synergic effects of MEK-AKT or MEK-PI3K inhibitions, along with novel synergistic effects of combined TAK1-AKT or TAK1-PI3K inhibitions.\n","id":16,"section":"models","summary":"This model accounts for cell fate decision network in the AGS gastric cancer cell line. A set of logical equations has been defined, wich recapitulates AGS data observed in cells in their baseline proliferative state. Using the modeling software GINsim, model reduction and simulation compression techniques were applied to cope with the vast state space of large logical models and enable simulations of pairwise applications of specific signaling inhibitory chemical substances.","tags":null,"title":"Cell fate decision network in the AGS gastric cancer cell line (Flobak et al 2015)","uri":"/models/2015-mammal-cell-fate-gastric-cancer/"},{"content":"This model provides a generic high-level view of the interplays between NFκB pro-survival pathway, RIP1-dependent necrosis, and the apoptosis pathway in response to death receptor-mediated signals.\nWild type simulations demonstrate robust segregation of cellular responses to receptor engagement. Model simulations recapitulate documented phenotypes of protein knockdowns and enable the prediction of the effects of novel knockdowns. In silico experiments simulate the outcomes following ligand removal at different stages, and suggest experimental approaches to further validate and specialise the model for particular cell types.\nThis analysis gives specific predictions regarding cross-talks between the three pathways, as well as the transient role of RIP1 protein in necrosis, and confirms the phenotypes of novel perturbations. Our wild type and mutant simulations provide novel insights to restore apoptosis in defective cells. The model analysis expands our understanding of how cell fate decision is made.\nThe original model focuses on the interplay between three pathways activated in response to the same signal.\nThis model has then been adapted for multiscale analysis [1] .\n","id":17,"section":"models","summary":"This model provides a generic high-level view of the interplays between NFκB pro-survival pathway, RIP1-dependent necrosis, and the apoptosis pathway in response to death receptor-mediated signals.\nWild type simulations demonstrate robust segregation of cellular responses to receptor engagement.","tags":null,"title":"Cell-Fate Decision in Response to Death Receptor Engagement","uri":"/models/2010-mammal-cell-fate/"},{"content":"Lineage fate decisions of hematopoietic cells depend on intrinsic factors and extrinsic signals provided by the bone marrow microenvironment, where they reside. Abnormalities in composition and function of hematopoietic niches have been proposed as key contributors of acute lymphoblastic leukemia(ALL) progression. Our previous experimental findings strongly suggest that pro- inflammatory cues contribute to mesenchymal niche abnormalities that result in maintenance of ALL precursor cells at the expense of normal hematopoiesis. Here, we propose a molecular regulatory network interconnecting the major communication pathways between hematopoietic stem and progenitor cells (HSPCs) and mesenchymal stromal cells (MSCs) within the bone marrow. Dynamical analysis of the network as a Boolean model reveals two stationary states that can be interpreted as the intercellular contact status. Furthermore, simulations describe the molecular patterns observed during experimental proliferation and activation. Importantly, our model predicts instability in the CXCR4/CXCL12 and VLA4/VCAM1 interactions following microenvironmental perturbation due by temporal signaling from Toll like receptors (TLRs) ligation. Therefore, aberrant expression of NF-κB induced by intrinsic or extrinsic factors may contribute to create a tumor microenvironment where a negative feedback loop inhibiting CXCR4/CXCL12 and VLA4/VCAM1 cellular communication axes allows for the maintenance of malignant cells.\n","id":18,"section":"models","summary":"Lineage fate decisions of hematopoietic cells depend on intrinsic factors and extrinsic signals provided by the bone marrow microenvironment, where they reside. Abnormalities in composition and function of hematopoietic niches have been proposed as key contributors of acute lymphoblastic leukemia(ALL) progression.","tags":null,"title":"Communication  pathways between Hematopoietic Stem Progenitor Cells (HSPCs) and Mesenchymal Stromal Cells (MSCs)","uri":"/models/2016-mammal-hspc-msc-communication/"},{"content":"Models of inter-cellular regulation can be viewed as the coordination between logical modules governing the intracellular regulatory interactions. This coordination is achieved by inter-cellular communication which is made operational by having external regulators influence the state of components in each intracellular module. By making the inter-cellular regulatory relations explicit, it is possible to obtain a global logical model describing the whole system. This tool provides a generic method to obtain this global model from the composition of identical individual logical modules [1] .\nUsage The composition tool is available in the Actions menu. It opens a composition specification dialog in which the user can specify the parameters of the composition.\nThe LRG currently loaded will be used as the intracellular module of the composition. In order for the composition to be meaningful, it is necessary that the LRG contains at least one input component, which will integrate the signals originating from external modules.\nIn this composition specification dialog the user indicates:\n  The number of instances of the composition, which refers to the number of logical modules to be composed\n  The neighbourhood relation between instances, which is a non-reflexive relation establishing which instances are in the vicinity and, consequently, can influence each instance. In general, this relation is not symmetrical meaning that if module 1 has module 2 as its neighbour, the former is influenced by the latter, but the reverse is not true unless otherwise specified. The Symmetry option makes all neighbourhood relations symmetrical automatically.\n  The logical integration function for each input the user wishes to map.\nThe available logical integration functions are OR, AND (for components taking Boolean values), MAX, MIN and THRESHOLD2 (for components taking other values). The THRESHOLD2 function has multi-valued arguments and produces a Boolean result, being trueonly if at least one argument takes value 2 or above. The arguments of the logical integration function can be specified as any subset of proper components. Depending on the type of input component being mapped and the proper components selected as arguments, the list of available logical integration functions is automatically updated.\nBy selecting a logical integration function and a subset of proper components as arguments, the value of the mapped input component will be governed by the value of the integration function applied to the corresponding arguments in all the neighbouring instances. For example, if an input component U0 is mapped to an OR of the proper components G1 and G2, then, for the first instance 1 (which, suppose, has instances 2 and 3 as neighbours), the input component will be the disjunction of the values of G1 and G2 in instance 2 and the values of the same components in instance 3. Consequently, all mapped input components rely on the same neighbouring relation.\n  Whether the composed model should be reduced with respect to the mapped input components.\nThe reduction option will remove the mapped input components from the composed model and reflect the regulatory effects of components external to each module onto the components regulated by the mapped input component. The reduced composed model corresponds to the most natural dynamics expected from the composition, since the mapped input components in the composed model are \u0026ldquo;dummy\u0026rdquo; components for which no delays are associated to the corresponding value updates.\nThe option not to reduce the resulting composed model should only be used to elicit fine tuning of the integration functions for particular modules.\n  Availability and further reading This method was implemented in GINsim 3.0.\n","id":19,"section":"doc","summary":"Composing multiple instances of an LRG, based on neighbour integration functions","tags":null,"title":"Composition","uri":"/doc/modify/composition/"},{"content":"The low response to infection in neonatal T cells contributes to a high incidence of morbidity and mortality. Here we evaluated the effect of the cytoplasmic and mitochondrial levels of Reactive Oxygen Species (ROS) of neonatal CD8+T cells on their low activation. This model captures the interplay between antigen recognition with ROS and metabolic status in T cell responses. This model displays alternative stable states, which corresponds to different cell fates, i.e. quiescent, activated and anergic, depending on ROS status.\nThe associated notebook can be loaded using the CoLoMoTo notebook docker image (see http://www.colomoto.org/notebook).\n","id":20,"section":"models","summary":"The low response to infection in neonatal T cells contributes to a high incidence of morbidity and mortality. Here we evaluated the effect of the cytoplasmic and mitochondrial levels of Reactive Oxygen Species (ROS) of neonatal CD8+T cells on their low activation.","tags":null,"title":"Contribution of ROS and metabolic status to neonatal and adult CD8+ T cell activation","uri":"/models/2019-mammal-neonatal-tcell-metabolism/"},{"content":"On the basis of an extensive analysis of the literature, L. Mendoza proposed a logical model encompassing the most crucial regulatory components and the cross-interactions involved in these differentiative decisions.\nThis model encompasses 17 regulatory components.\n","id":21,"section":"models","summary":"On the basis of an extensive analysis of the literature, L. Mendoza proposed a logical model encompassing the most crucial regulatory components and the cross-interactions involved in these differentiative decisions.\nThis model encompasses 17 regulatory components.","tags":null,"title":"Control of Th1/Th2 cell differentiation","uri":"/models/2006-mammal-th-differentiation/"},{"content":"Alternative cell differentiation pathways are believed to arise from the concerted action of signalling pathways and transcriptional regulatory networks. However, the prediction of mammalian cell differentiation from the knowledge of the presence of specific signals and transcriptional factors is still a daunting challenge. In this respect, the vertebrate hematopoietic system, with its many branching differentiation pathways and cell types, is a compelling case study.\nThis model accounts for the regulatory network and signalling pathways controlling Th cell differentiation. As most available data are qualitative, it is relied on a logical formalism to perform extensive dynamical analyses. To cope with the size and complexity of the resulting network, it is used an original model reduction approach [1] , together with a stable state identification algorithm [ 2 ] . To assess the effects of heterogeneous environments on Th cell differentiation, it is performed a systematic series of simulations, considering various prototypic environments.\nConsequently, it is identified stable states corresponding to canonical Th1, Th2, Th17 and Treg subtypes, but these were found to coexist with other transient hybrid cell types that co-express combinations of Th1, Th2, Treg and Th17 markers in an environment-dependent fashion. In the process, the logical analysis highlights the nature of these cell types and their relationships with canonical Th subtypes. Finally, this logical model can be used to explore novel differentiation pathways in silico.\n","id":22,"section":"models","summary":"Alternative cell differentiation pathways are believed to arise from the concerted action of signalling pathways and transcriptional regulatory networks. However, the prediction of mammalian cell differentiation from the knowledge of the presence of specific signals and transcriptional factors is still a daunting challenge.","tags":null,"title":"Control of Th1/Th2/Th17/Treg cells differentiation","uri":"/models/2010-mammal-th-differentiation/"},{"content":"Logical modeling has proven suitable for the dynamical analysis of large signaling and transcriptional regulatory networks. In this context, signaling input components are generally meant to convey external stimuli, or environmental cues. In response to such external signals, cells acquire specific gene expression patterns modeled in terms of attractors (e.g. stable states). The capacity for cells to alter or reprogram their differentiated states upon changes in environmental conditions is referred to as cell plasticity.\nThis model in an extended version of a published logical model of T-helper cell differentiation and plasticity, which accounts for novel cellular subtypes. The model encompasses 20 signaling pathways, a dozen of transcription factors, and about 30 cytokines, amounting to 101 components in total.\nComputational methods recently developed to efficiently analyze large models are first used to study static properties of the model (i.e. stables states). Symbolic model checking is then applied to get further insights into reachability properties between Th canonical subtypes upon changes of specific prototypic environmental cues.\nThe model reproduces novel reported Th subtypes (Tfh, Th9, Th22) and predicts additional Th hybrid subtypes in term of stables states. Using the model checker NuSMV-ARCTL, an abstract view of the dynamics, called reprograming graph, is produced providing a global and synthetic view of Th plasticity. The model is consistent with experimental data showing the polarization of naïve Th cells into the canonical Th subtypes. The model further predicts substancial plasticity of Th subtypes depending on the signalling environment.\n","id":23,"section":"models","summary":"Logical modeling has proven suitable for the dynamical analysis of large signaling and transcriptional regulatory networks. In this context, signaling input components are generally meant to convey external stimuli, or environmental cues. In response to such external signals, cells acquire specific gene expression patterns modeled in terms of attractors (e.","tags":null,"title":"Control of Th1/Th2/Th17/Treg/Tfh/Th9/Th22 cell differentiation","uri":"/models/2014-mammal-th-differentiation/"},{"content":"Its central motivation is the definition of a generic approach to obtain an integrated modelling of the regulated Trp biosynthesis pathway. In this context, we refer to Petri net models [1] . First, we present the modelling of the regulatory control of the Trp biosynthesis in E.Coli (download Trp_reg.zginml). The following figure illustrates the simplified logical regulatory graph. Each node of the regulatory graph represents an active component: Trp, the active enzyme (i.e. not associated with Trp), and the active repressor (the dimmeric form of TrpR in association with Trp). The last node (Trpext) accounts for the import of Trp from the external medium (note the permeation process is considered as constitutive here, for sake of simplicity).\nAll nodes are binary ( i.e. can take the value 0 or 1), except Trp, which is represented by a ternary variable (taking the values 0,1,2). The association of tryptophan (at high levels) with the inactive form of the repressor (aporepressor) gives rise to the active form of the repressor (holorepressor); active repressor inhibits the transcription and thus the production of the enzyme TrpE; this enzyme is needed to produce the aminoacid Trp; the association of Trp (at moderate or high levels) with this enzyme inhibits its activity.\nThe Petri nets for the biosynthetic pathway and the regulatory control are available below (two PN formats), as well as the model integrating both levels (see additional files and the supporting reference).\n","id":24,"section":"models","summary":"Its central motivation is the definition of a generic approach to obtain an integrated modelling of the regulated Trp biosynthesis pathway. In this context, we refer to Petri net models [1] . First, we present the modelling of the regulatory control of the Trp biosynthesis in E.","tags":null,"title":"Controlling tryptophan biosynthesis","uri":"/models/2005-ecoli-trp-biosynthesis/"},{"content":"Leaning on the differential model published by Chen et al. in 2004 [1] , we have delineated a discrete, logical model that reproduces the main qualitative results reported in this study, in terms of cycle viability or arrest in a particular stable state, for the wild type as well as over one hundred mutant conditions.\nIn a first step, we have defined a regulatory graph encompassing the main documented interactions between core regulators of the cell cycle (Cdk/cyclins, APC, Cdk inhibitors). For proper logical rules, in the wild type situation, our model accounts for the following sequence of events: firing of the origins of replication (ORI goes up), spindle alignment (SPN goes up), inhibition of the securin (Pds1 goes down), division (MITOSIS goes up to level 2) after the formation of a bud (BUD must reach at least transiently the level 1), and origin relicensing (ORI goes down). This sequence serves as a criterion to evaluate the viability of the cell. Based on the levels of activity of key variables (Clb5, Clb2, Pds1), we can divide the cycle into three different phases: G0/G1 (low Clb5 and Clb2 activity, either OFF or sequestered by Sic1/Cdc6), S/G2 (high Clb5 activity, i.e. not sequestered by the CKI, and low Clb2), and M (high Clb2 activity). The M phase is itself subdivided into prophase/metaphase (high Pds1, low Esp1, sister chromatids not separated) and anaphase/telophase (low Pds1, high Esp1). These rules are used to characterised cell arrests in various mutants. Although the logical formalism is particularly well suited to represent information fluxes (activation, inhibition), it is not adapted to the representation of mass flow, reactant consumption, or complex formation. Consequently, we represent the complexes implicitly: a complex is considered present if all its components are present; all components, whether regulatory or enzymatic subunits, regulate the targets of the enzymatic member, with a logical AND rule (or AND NOT in the case of sequestration). For example, in the case of the inhibition of the Clbs by the CKI, we have represented inhibition of the Clbs by introducing arrows from the CKI towards the Clbs targets, so that inhibition of the Clbs is represented by an inhibition of the components they activate and by an activation of the components they inhibit. In Chen\u0026rsquo;s model, cytokinesis was triggered by a fall of clb2\u0026rsquo;s activity below a certain threshold. To formulate this rule in the logical formalism, we introduced a multilevel CYTOKINESIS variable. This variable is fully activated (level 2) only when CycB is inactivated, either by a decrease of CycB level from level 2 to level 1, or by an increase of the CKI activity when Clb2 is still high. To differentiate between a rise and a fall of CycB activity, CYTOKINESIS has to be pre-activated (up to level 1) by high Clb2 activity before being allowed to reach level 2. Our model simulations qualitatively agree with the behaviour reported for the wild-type Yeast, as well as for over one hundred mutant conditions. This led us to further develop this model by defining additional regulatory modules such as the morphogenetic checkpoint. We also developed a model for mitotic exit based on more recent evidence. The resulting logical models are presented as separate entries of our model repository. In conclusion, our core cell cycle model served as a benchmark to assess the power of logical modelling applied to a complex oscillatory system, as well as the first step towards the development of a more comprehensive model of the budding yeast cell cycle network [ 2 ] .\n","id":25,"section":"models","summary":"Leaning on the differential model published by Chen et al. in 2004 [1] , we have delineated a discrete, logical model that reproduces the main qualitative results reported in this study, in terms of cycle viability or arrest in a particular stable state, for the wild type as well as over one hundred mutant conditions.","tags":null,"title":"Core engine controlling the budding yeast cell cycle","uri":"/models/2009-budding-yeast-core-cell-cycle/"},{"content":"TODO\n","id":26,"section":"doc","summary":"Generate LRG documentation using annotations","tags":null,"title":"Documentation export","uri":"/doc/formats/documentation/"},{"content":"TODO: {{ \u0026lt;download \u0026ldquo;releases/current\u0026rdquo; \u0026ldquo;Current release\u0026quot;\u0026gt;}}\nTODO {{\u0026lt;download \u0026ldquo;releases/nightly\u0026rdquo; \u0026ldquo;Latest nightly build\u0026quot;\u0026gt;}}\n","id":27,"section":"","summary":"TODO: {{ \u0026lt;download \u0026ldquo;releases/current\u0026rdquo; \u0026ldquo;Current release\u0026quot;\u0026gt;}}\nTODO {{\u0026lt;download \u0026ldquo;releases/nightly\u0026rdquo; \u0026ldquo;Latest nightly build\u0026quot;\u0026gt;}}","tags":null,"title":"Download","uri":"/download/"},{"content":"We derived this model from published data on drosophila cell cycle, completed when necessary with information transferred from other organisms, principally mammals, using orthology relationships between regulatory components. It can be used to simulate the canonical cell cycle, syncytial cycles, as well as endocycles.\n","id":28,"section":"models","summary":"We derived this model from published data on drosophila cell cycle, completed when necessary with information transferred from other organisms, principally mammals, using orthology relationships between regulatory components. It can be used to simulate the canonical cell cycle, syncytial cycles, as well as endocycles.","tags":null,"title":"Drosophila cell cycle","uri":"/models/2011-drosophila-cell-cycle/"},{"content":"Drosophila DPP (TGF-beta homolog) signalling pathway is triggered by ligand-induced formation of heterotetrameric complexes consisting of two type II receptors and two type I receptors with intrinsic serine/threonine kinase activity. The type I receptor (SAX or TKV) is phosphorylated by the constitutively active type II receptor kinase (Punt). Consequently, the complex becomes active and phosphorylates the receptor-regulated Smads (R-Smads). Phosphorylated R-Smads (MAD and Smox) form complexes with a common- mediator Smad (Medea) and translocate into the nucleus, where they regulate the transcription of target genes in co-operation with other transcription factors (nejire, schnurri). DPP is a morphogen, i.e. a molecule distributed in a concentration gradient that elicits different cell fates as a function of its concentration, thereby organizing a series of cell types in a defined spatial array. In response to DPP gradient, cells adopt different fates. The establishment of dpp gradient involves the proteins SOG and TSG. These proteins together capture the DPP ligand and prevent its binding to the receptor (Punt). The heteromeric complex (SOG, DPP, TSG) then release the DPP ligand, a process involving the cleavage of SOG by Tolloid (a metalloprotease). Other TGF-beta signals, Glass-bottom-boa (GBB) and Screw (SCW), help DPP to potentiate cells to respond. SCW and GBB are never expressed together in the same region and affect different cells during: i) early D/V patterning of the embryo and specification/differentiation of dorsal cells (if there is no screw, dpp alone is unable to establish the D/V pattern and embryo lack amnioserosa); ii) the development of adult structures such as the wing. GBB or SCW form heterodimeric complexes with DPP. These heterodimers can only signal through TKV, while SCW/SCW and GBB/GBB signals trough SAX, and DPP/DPP trough TKV and SAX. To model DPP signalling and the formation of the gradient, we have considered three different levels for the TKV receptor (0, 1, 2) and the MADMED effector (0, 1, 2). The regulatory graph also accounts for the potentiation of responding cells due to association of DPP and SCW, or of DPP and GBB. Activated by MADMED, DAD is a pathway inhibitor that can modulate the pathway activity from high to low signalling. DAD works by abrogating the phosphorylation of the MADMED complex by TKV or SAX, thus involving a negative circuit between DAD and the MADMED complex. In addition, BRK another inhibitor of the DPP pathway can block the transcription of dad. Our model reproduces the formation of the DPP signalling gradient and accounts for the role of the heterodimers signalling in cell potentiation. To simulate DPP signalling, we start from an initial state corresponding to non differentiated cell, that can receives high or low level of DPP signal. The use of ternary nodes enables us to account for differential effects of different DPP levels (gradient). The cells receiving high level expression display the hetero-dimers SCW/DPP or GBB/DPP and correspond to Tld expression area, which promotes DPP gradient formation. In presence of medium DPP, TSG and SOG but no TLD are initially needed to capture homo- or hetero-dimer, diminishing pathway signalling intensity (expression level 1 for TKV and MADMED). In presence of high pathway signalling, two situations occur: i) in cells potentiated by SCW: a sequestering complex (SOG/TSG/ DPP/SCW) will release the signalling molecule upon TLD clivage, in addition to normal DPP signalling. This leads to a higher signal transduction. ii) in cells potentiated by GBB, the situation is similar but involve a different heterodimer (GBB/DPP). These situations correspond to two different stable states with high TKV and MADMED (level 2), denoting that more receptors are required to enable a higher level of nuclear MADMED. We consider five different initial states: i) the first one corresponds to the absence of signalling, i.e. absence of DPP; ii) the second one corresponds to medium signalling, characterized by the presence of Dpp at level 1 and of SCW; iii) the third one corresponds to medium signalling, characterized by the presence of Dpp at level 1 and of GBB); iv) the fourth one corresponds to the presence of DPP at level 2 and of SCW; v) the last one corresponds to the presence of DPP at level 2 and of GBB. These set of initial states enable the simulation of five situations. No signalling, two medium and two high signalling that characterize the behavior of the pathway. The stable state obtained with the no signalling simulation shows the absence of binding of the ligands to the receptors TKV and Punt (level of expression 0) and the non activation of target nodes. These medium signals simulations in presence of DPP, show the activation of the receptors (level of expression 1) and subsequent signalling cascade leading to the activation of pathway\u0026rsquo;s targets. These medium signal are defined by the level of expression 1 for DPP, MADMED and TKV while in the high signalling sets, these nodes are expressed at level 2. The node Tkv is multi-valued because the high signalling is characterized by the binding of hetero dimers (DPP/SCW or DPP/GBB) signalling through TKV. Note that GBB and SCW don\u0026rsquo;t have the same expression pattern. For more details on Dpp signalling pathway regulation see [1, 2 , 3 , 4 , 5 ] .\n","id":29,"section":"models","summary":"Drosophila DPP (TGF-beta homolog) signalling pathway is triggered by ligand-induced formation of heterotetrameric complexes consisting of two type II receptors and two type I receptors with intrinsic serine/threonine kinase activity. The type I receptor (SAX or TKV) is phosphorylated by the constitutively active type II receptor kinase (Punt).","tags":null,"title":"Drosophila Dpp Signalling pathway","uri":"/models/2013-drosophila-dpp/"},{"content":"Four activating ligands, Spitz, Keren, Gurken and Vein have been identified for drosophila EGF receptors, called DER. Spitz (SPI) is the major ligand and is involved in most situations where the pathway is activated. Keren plays a minor, redundant role, while Gurken is used exclusively during oogenesis. These ligands are produced as inactive transmembrane precursors, which are retained in the endoplasmic reticulum and needed to processed by the chaperone protein Star. Processed ligands are directed into another compartment where they encounter Rhomboid (RHO) serine proteases, which cleave the ligand precursors within the transmembrane domain to release the active, secreted ligand form. RHO also cleaves and inactivates Star, attenuating the level of cleaved ligand that is produced. The fourth ligand, Vein, is produced as a secreted molecule, which is a weaker activating ligand used either to enhance signalling by other ligands or in specific situations such as muscle patterning. Binding of ligands to DER leads to dimerization and triggering of the canonical DRK/SOS/RAS/RAF/DSOR1/Rolled pathway. DRK (SH2-domain-containing protein) recruits SOS (Son of sevenless, a guanine nucleotide exchange factor) to catalyze the exchange of RAS bound GDP for GTP exchange, thereby activating RAS. RAS then promotes the activation of RAF, leading to DSOR1 activation, and eventually to Rolled (RL) activation. RL inactivates transcriptional co- repressors, such as Aop, and activates transcription factors, such as Pointed (PNT) ([1] ). The transcriptional activator PNT is the major effector of the pathway. The protein Anterior open (AOP) is a constitutive repressor, which competes for PNT binding sites and can be removed from the nucleus and degraded upon phosphorylation by MAP kinases. AOS (Argos), STY (Sprouty) and KEK (Kekkon) are inducible repressive elements involved in negative feedbacks. AOS is a secreted molecule, which sequesters the ligand SPI (Spitz). STY acts downstream of DER, but upstream of RAS and RAF, by recruiting GAP1 and blocking the ability of DRK to bind to its positive effector. KEK is a transmembrane protein forming a non-functional heterodimer with the receptor. Constitutively expressed, CBL (E3 ligase) modulates DER signalling by recognizing activated, internalized receptor molecules and inducing their ubiquitination and degradation. CBL may also enhance the endocytosis of DER, following ligand binding. Modulation of DER signalling by CBL has been reported only in the follicle cells, which receive the Gurken signal from the oocyte ([ 2 , 3 , 4 , 5 ] ).\nOur logical model represents a cell receiving different combinations of ligands binding (SPI or Vein or both) and express/receive different levels of inhibitory inputs (Aos, Sty, Cbl, Kek). The signalling pathway is characterized by no signalling, medium or high signalling process designed by multi-valued nodes. We consider five main wild- type cellular situations:\n Cells secreting ligands but lacking Der activation (inhibition of Der), leading to no signalling. Cells receiving medium signal with SPI expressed at level 1 and/or Vein expressed also at level 1, leading to medium signalling. Cells receiving SPI at level of expression 1 (and/or Vein expressed at level 1) and in presence of an inhibitor (e.g. STY, AOS, or KEK), leading to no signalling. Cells receiving SPI at level of expression 2 in the absence of inhibitors, leading to high signalling. Cells receiving SPI at level of expression 2 (and/or Vein expressed at level 1) in presence of an inhibitor (e.g. STY, AOS, or KEK,\u0026hellip;), leading only to medium signalling.  ","id":30,"section":"models","summary":"Four activating ligands, Spitz, Keren, Gurken and Vein have been identified for drosophila EGF receptors, called DER. Spitz (SPI) is the major ligand and is involved in most situations where the pathway is activated. Keren plays a minor, redundant role, while Gurken is used exclusively during oogenesis.","tags":null,"title":"Drosophila EGF Signalling pathway","uri":"/models/2013-drosophila-egf/"},{"content":"The Drosophila eggshell constitutes a remarkable system for the study of epithelial patterning, both experimentally and through computational modeling. Dorsal eggshell appendages arise from specific regions in the anterior follicular epithelium that covers the oocyte: two groups of cells expressing broad (roof cells) bordered by rhomboid expressing cells (floor cells). Despite the large number of genes known to participate in defining these domains and the important modeling efforts put into this developmental system, key patterning events still lack a proper mechanistic understanding and/or genetic basis, and the literature appears to conflict on some crucial points. We tackle these issues with an original, discrete framework that considers single-cell models that are integrated to construct epithelial models. We first build a phenomenological model that reproduces wild type follicular epithelial patterns, confirming EGF and BMP signaling input as sufficient to establish the major features of this patterning system within the anterior domain. Importantly, this simple model predicts an instructive juxtacrine signal linking the roof and floor domains. To explore this prediction, we define a mechanistic model that integrates the combined effects of cellular genetic networks, cell communication and network adjustment through developmental events. Moreover, we focus on the anterior competence region, and postulate that early BMP signaling participates with early EGF signaling in its specification. This model accurately simulates wild type pattern formation and is able to reproduce, with unprecedented level of precision and completeness, various published gain-of-function and loss-of-function experiments, including perturbations of the BMP pathway previously seen as conflicting results. The result is a coherent model built upon rules that may be generalized to other epithelia and developmental systems.\nHere, we provide the two single cell models (phenomenological and mechanistic). The multicellular model versions are further available in the EpiLog model repository. The Python prototype to simulate epithelial models together with all model files are given on a different page.\n","id":31,"section":"models","summary":"The Drosophila eggshell constitutes a remarkable system for the study of epithelial patterning, both experimentally and through computational modeling. Dorsal eggshell appendages arise from specific regions in the anterior follicular epithelium that covers the oocyte: two groups of cells expressing broad (roof cells) bordered by rhomboid expressing cells (floor cells).","tags":null,"title":"Drosophila eggshell patterning","uri":"/models/2014-drosophila-eggshell-patterning/"},{"content":"As of 2019, the prototype software described on this page has been superseded by the Epilog tool. This prototype software has been developed mainly by Adrien Fauré (with some help from Oltman de Wiljes) to create and simulate logical models of epithelia, in the context of a research project on Drosophila oogenesis (project supported by the FCT, PTDC/EIA-CCO/099229/2008). It is made available to facilitate reproduction of all results described in the manuscript mentioned below. A user-friendly software is currently under development, based on the principles of this prototype.\nAdrien Fauré, 2013-12-12\nReference: Adrien Fauré, Barbara M.I. Vreede, Elio Sucena, Claudine Chaouiya. A comprehensive model of EGF and BMP pathways reveals cell-autonomous and juxtacrine effects patterning the Drosophila eggshell.\nEPITHELIAL MODELS An epithelial model is defined as a grid of hexagonal cells. Each cell has six direct neighbors, except along the left and right borders: the grid forms a cylinder.\nCells are assigned the same set of variables and associated logical rules, thus defining a cellular logical model. Rules specify each component\u0026rsquo;s target level, depending on the levels of its regulators, including regulators from other cells within a radius specified by the user.\nThe values of the variables can be visualised on the grid according to a user-defined color code.\nLOGICAL RULES Rules are written with each cell as the reference point. One rule has to be specified for each non-0 value of each variable. The syntax used for logical rules is based on python code that is interpreted by the programme.\n To check the value of a cellular variable: self.parentcell.getspecies(\u0026lsquo;species\u0026rsquo;).value returns the value of the variable \u0026ldquo;species\u0026rdquo;. To check the value of an extracellular variable: self.parentcell.haswith(species, distance, value) returns the number of cells within the distance = (min, max) interval where the specified variable (species) has the specified value. If distance is omitted, default is \u0026ldquo;(1,1)\u0026quot;; if value is omitted, default is \u0026ldquo;1\u0026rdquo;. Logical operators (\u0026ldquo;and\u0026rdquo;, \u0026ldquo;or\u0026rdquo; and \u0026ldquo;not\u0026rdquo;) can be used, as well as relational operators (\u0026ldquo;==\u0026rdquo;, \u0026ldquo;\u0026lt;\u0026rdquo;,\u0026ldquo;\u0026gt;\u0026rdquo;,\u0026ldquo;\u0026lt;=\u0026rdquo;, \u0026ldquo;\u0026gt;=\u0026rdquo;, \u0026ldquo;!=\u0026rdquo;).  Example: self.parentcell.getspecies(\u0026lsquo;X\u0026rsquo;).value==1 or self.parentcell.haswith(\u0026lsquo;Y\u0026rsquo;, value=2, distance=(0,3))\u0026gt;=10\nwill return true if variable X equals 1 in the cell, or if the cell has at least 10 neighbours having Y at level 2 within a [0,3] radius (thus including the cell itself in this case).\nSTATES A \u0026ldquo;state\u0026rdquo; corresponds to the levels of all variables, in all cells of the model. In practice, a state can be saved as a list of cells where variables have a non-zero value (level 0 being treated as the default). The current state can be visualised on the grid, and specific states can be saved to be loaded later.\nSIMULATION Simulations are carried out synchronously, step by step, from the current state, for all variables in all cells. Whenever needed, some variables may be assigned a priority in the form of an integer, with 1 being the highest priority.\nFor example, in the Drosophila eggshell patterning mechanistic model, inputs (and the gene Midline that is downstream to only inputs) are given priority 1; integration variables that count the number of cells expressing Rho, Aos and Br in the neighbouring cells are given priority 2; EGFR, which rapidly integrates these signals, is given priority 3; other components are given priority 4.\nHANDLING MUTATIONS There is no explicit way to define mutant cells. The simplest possibility is to define a \u0026ldquo;mutant\u0026rdquo; variable as a self-maintaining input to the component to be mutated. That component\u0026rsquo;s rule can then be adjusted to define its behaviour in presence or absence of the mutation.\nGUI  File menu:  New: create a new grid. Specify the grid\u0026rsquo;s dimensions and click \u0026ldquo;Create\u0026rdquo;. Open: open an existing model Save: save the current model. Model are saved as text files that include the list of species and their logical rules, and a list of states.   Edit menu: Select or unselect all cells to visualise and change their parameters (the value of their variables) through the right panel. (\u0026ldquo;Unselect\u0026rdquo; actually selects all cells, only not showing the dark line around them, used for screen shots) States menu: Save, load or delete states. Simulation panel: Click to update the model, by one or up to ten steps. Upon the second choice, the simulation will stop either after ten steps or when a stable state is reached, in which case the number of steps will be displayed in the panel. The panel also displays the list of genes components that have been updated. canvas: Displays the grid that represents the epithelial model. Click (left mouse button) on a cell to select it. Hold to select several cells. (For simplicity, clicks around the top to bottom parts of the cell are not taken into account. This actually permits to select discontinuous regions\u0026hellip;) right column: Top part shows the list of the variables along with their values in the selected cells. Select one or several variables and click \u0026ldquo;Show\u0026rdquo; to display their values on the grid in the user-defined color code. Lower part allows the user to select one variable and modify its value in the selected cells. bottom panel: Left part lets the user select one variable (independently from the right column parameter panel) and visualise or modify its parameters (name, maximum value and color), along with the logical rules. To modify the name, max level or color, simply click on the corresponding field and enter a new value, then set the focus elsewhere (e.g. by clicking on an other field) to validate. White background indicates the value displayed in the field is the one stored in the model; yellow, that it\u0026rsquo;s been modified but not yet validated; red, that the value entered is not acceptable (e.g., entering a variable name that already exists, or a negative max value, etc.). To modify the logical rule, click on the rule for one level and then click the \u0026ldquo;edit rule\u0026rdquo; button. Then in the new panel, edit the rule and click the set button to validate.  Download All files in a single archive containing:\n Python prototype implementing the simulation of the epithelial models. Phenomenological cellular model: phenomenological_cellular.zginml (GINsim file) Mechanistic cellular model: mechanistic_cellular.zginml(GINsim file) Phenomenological epithelial model: phenomenologic_epithelium.txt (text file to be loaded from the python prototype) Mechanistic epithelial model: mechanistic_epithelium.txt (text file to be loaded from the python prototype)  ","id":32,"section":"suppl","summary":"Prototype software for the analysis of epithelial patterning","tags":null,"title":"Drosophila eggshell patterning","uri":"/suppl/eggshell-patterning/"},{"content":"Drosophila genome encodes two FGF receptors, HTL (Heartless) and BTL (Breathless), which are required for the morphogenesis of different tissues. BTL is expressed in the tracheae, while HTL is expressed in embryonic mesoderm and was first identified because of its essential role in heart development. BTL ligand, BNL is encoded by the branchless gene [1] . THS (Thisbe) and PYR (Pyramus) function in a partially redundant fashion to activate heartless (htl). Upon ligand binding receptor dimerization triggers the canonical DRK/SOS/RAS/RAF/DSOR1/RL pathway. In contrast with other RTKs, Stumps is needed to trigger signal transduction [ 2 , 3 ] . Stumps is a cytoplasmic protein expressed in cells also expressing the FGF receptors. The presence of an ankyrin repeat, a coiled-coil structure and many tyrosines suggests that Stumps could bind SH2 domains of proteins such as DRK or CSW [ 4 ] . As a result, DRK recruits the guanine nucleotide exchange factor SOS (Son of sevenless), which catalyzes the exchange of GDP bound to RAS for GTP. Activated RAS then promotes the activation of RAF (Pole hole), DSOR1, and eventually that of RL (Rolled). RL can activate transcription through the inactivation of transcriptional co-repressors such as Anterior Open (AOP), as well as through the activation of transcriptional activators such as PNT (Pointed, with two forms denote by suffixes P1 and P2) [ 5 , 6 ] . The negative regulator STY (Sprouty) acts downstream of SOS but upstream of RAS and RAF, by recruiting GAP1 and blocking the ability of DRK to bind to its positive effector. Our model enables the simulation of pathway responses to different ligand combinations. In this regard, we define four initial states to simulate different behavior of the pathway. The first initial state reproduces the signalling through the receptor HTL (bound by Pyr and Ths), the second initial state corresponds to the signalling through the receptor BTL, the third initial state corresponds to the involvement of the inhibitor Sprouty during signalling conditions and the fourth initial state corresponds to the absence of signalling (no ligands binding). Each of these initial states lead to a specific stable state representative of in vivo conditions.\n","id":33,"section":"models","summary":"Drosophila genome encodes two FGF receptors, HTL (Heartless) and BTL (Breathless), which are required for the morphogenesis of different tissues. BTL is expressed in the tracheae, while HTL is expressed in embryonic mesoderm and was first identified because of its essential role in heart development.","tags":null,"title":"Drosophila FGF Signalling pathway","uri":"/models/2013-drosophila-fgf/"},{"content":"Processing of HH ligand The precursor of HH is auto-catalytically cleaved to produce an N-terminal (HH-N) and a C- terminal (HH-C) fragments [1, 2 ] . A cholesterol moiety is covalently attached to the last amino acid of HH-N to create HH-Np, that is responsible for the biological activities of HH proteins [ 1 , 2 , 3 ] . The N-terminal region of HH-Np is further modified by addition of palmitate that is essential for its signalling activity [ 4 , 5 , 6 , 7 , 8 , 9 ] . We model these aspects by an AND rule (combining inputs from DLP, IHOG, Rasp, DISP, SHF, Lipophorin, BOI and DALLY) attached to the component representing the secreted HH molecule, denoted Hh in our model. HH Signalling Two integral membrane proteins are involved in HH signal reception: Patched and Smoothened. HH binding to its receptor Patched (PTC) relieves PTC- mediated repression of Smoothened (SMO), a serpentine-like membrane protein required for HH signalling [ 10 , 11 ] . This allows SMO stabilisation, activation, and phosphorylation by Shaggy (SGG), and downstream signalling through the formation of a protein complex including the serine threonine kinase Fused (FU), the kinesin-like protein Costa (COS), and the protein Suppressor of Fused (SUFU), ultimately controlling the post-translational processing of the protein Cubitus interruptus (CI) [ 12 ] . In the absence of HH, COS binds CI directly and sequesters it in the cytoplasm with the help of SUFU. The recruitment of different kinases (Casein kinase 1 alpha, Shaggy, Protein kinase A) then leads to the phosphorylation of CI and to its proteolysis by SLMB. The resulting truncated protein (CI_rep) is released and enters the nucleus, where it has a transcriptional repressing activity. Recent evidence further indicates that SMO is inhibited by TOW, which tentatively mediates the effect of PTC on SMO [ 13 , 14 ] . Following SMO activation, the transcription factor CI is phosphorylated and translocated into the nucleus in its entire form, which plays a transcriptional activatory role (CI_act). In the model, a cascade of inhibitions, from HH on PTC, and from PTC on SMO, implements the indirect positive action of HH on SMO. A protein complex including CI, COS, and FU, phosphorylates and thereby inhibits SU(FU), ultimately favouring the CI activatory form and its translocation into the nucleus. We model the roles of the kinases (SGG, PKA, and CK1a), COS and SU(FU) (both needed to recruit the kinases) in the processing of CI in terms of inhibitory interactions on CI_act and activatory interactions on CI_rep [ 15 , 16 ] . Complexes are represented implicitly (they are formed as soon as the components are synthesised or activated), while logical rules define component activity requirements to form CI_act versus CI_rep forms. To explore the dynamic of the pathway, we define two initial states to simulate the presence and the absence of signalling. On one hand, the non binding of HH (level expression 0) triggers a series of signalling cascades that lead to the activation of several kinases (for example SGG, PKA, CK1a, \u0026hellip;) at level of expression 1, which will permit the formation of CI repressor (expressed at level 1), which in turn will inhibit the targets. On the other hand, the presence of HH (level of expression 1) leads to a stable state corresponding to the signalling conditions leading to the formation of CI activator that will activate the targets node (level of expression 1).\n","id":34,"section":"models","summary":"Processing of HH ligand The precursor of HH is auto-catalytically cleaved to produce an N-terminal (HH-N) and a C- terminal (HH-C) fragments [1, 2 ] . A cholesterol moiety is covalently attached to the last amino acid of HH-N to create HH-Np, that is responsible for the biological activities of HH proteins [ 1 , 2 , 3 ] .","tags":null,"title":"Drosophila Hh Signalling pathway","uri":"/models/2013-drosophila-hh/"},{"content":"In Drosophila, three secreted ligands (OS, UPD2 and UPD3) have been identified for the JAK/STAT pathway. Their binding to the receptor dome induces its homo- dimerization, enabling hop to phosphorylate specific tyrosine residues of the receptor. Consequently, STAT92E is also phosphorylated by HOP, leading to his homo-dimerization and nuclear translocation. In the nucleus, STAT92E binds to target DNA sequences and acts as an activator of transcription of several target genes [1] . During Drosophila development, the JAK/STAT pathway is involved in embryonic segmentation, eye development, cell growth, haematopoiesis, and sex determination [ 2 , 3 ] . JAK/STAT signalling also plays important roles during spermatogenesis [ 4 ] and oogenesis [ 3 , 5 , 6 ] . To study the dynamic of the pathway, we define a set of initial states representative of in vivo situations during JAK/STAT signalling. More precisely, we define a three initial states corresponding to pathway signalling (binding of OS or UPD2 or UPD3) and two initial states corresponding to pathway signalling in the presence of an inhibitor (SOCS44A or BRWD3) and one initial state corresponding to non signalling conditions (no binding of ligands).\n","id":35,"section":"models","summary":"In Drosophila, three secreted ligands (OS, UPD2 and UPD3) have been identified for the JAK/STAT pathway. Their binding to the receptor dome induces its homo- dimerization, enabling hop to phosphorylate specific tyrosine residues of the receptor.","tags":null,"title":"Drosophila JAK/STAT Signalling pathway","uri":"/models/2013-drosophila-jak-stat/"},{"content":"This logical model encompasses 48 components and 82 regulatory interactions controlling mesoderm specification during Drosophila development, thereby integrating all major genetic processes underlying the formation of four mesodermal tissues. The model is based on in vivo genetic data, partly confirmed by functional genomic data.\nModel simulations qualitatively recapitulate the expression of the main lineage markers of each mesodermal derivative, from developmental stage 8 to 10, for the wild type case, as well as for over twenty reported mutant genotypes.\nThis model has been used to systematically predict the effects of over 300 loss- and gain-off unction mutations, and combinations thereof. By generating specific mutant combinations, several novel predictions experimentally could be validated, demonstrating the robustness of model.\n","id":36,"section":"models","summary":"This logical model encompasses 48 components and 82 regulatory interactions controlling mesoderm specification during Drosophila development, thereby integrating all major genetic processes underlying the formation of four mesodermal tissues. The model is based on in vivo genetic data, partly confirmed by functional genomic data.","tags":null,"title":"Drosophila mesoderm specification","uri":"/models/2016-drosophila-mesoderm-specification/"},{"content":"Notch signaling is involved in the modulation of Twist expression and the subdivision of the mesoderm into high and low domain of Twist. The binding of Delta leads to the cleavage and the release of the Notch intracellular domain NICD. During mesoderm specification, NICD can inhibit Twist by forming a complex with EMC, or in combination with Enhancer of split and Suppressor of hairless proteins. In this regard, we modeled the effect of Notch pathway on Twist expression. Our defined initial states reproduce biological data during mesoderm specification. When Delta is ON (high or medium signaling), the level of Twist expression can decrease from 2 to 1 or 0. When Delta is OFF (no signaling), Twist is expressed at its maximal level 2. For more details on Notch signalling pathway and it\u0026rsquo;s role on Twist expression regulation during Drosophila development [1, 2 , 3 , 4 , 5 ] .\n","id":37,"section":"models","summary":"Notch signaling is involved in the modulation of Twist expression and the subdivision of the mesoderm into high and low domain of Twist. The binding of Delta leads to the cleavage and the release of the Notch intracellular domain NICD.","tags":null,"title":"Drosophila Notch Signalling pathway","uri":"/models/2013-drosophila-notch/"},{"content":"During DV patterning, a regulatory cascades composed by three dorsal group genes gastrulation-defective, snake and easter, encoding serine proteases, lead to the cleavage of Spatzle (SPZ), that in turn activates the Toll-dorsal signaling pathway [1, 2 ] . Spatzle presumably forms a gradient in the perivitelline fluid. Toll signaling is ultimately responsible for the formation of the embryonic dorsal nuclear gradient. In the nucleus, dorsal controls the expression of zygotic genes in a concentration-dependent manner and this process results in the patterning of the dorsal–ventral embryonic axis. twist is one of the earliest target genes controlled by the highest concentration of dorsal in the mesodermal cells. It is a transcriptional activator that cooperates with dorsal in activating snail in the mesoderm. Dorsal and Twist also cooperate to activate the neurogenic gene, sim (single minded), expressed in the neurectoderm and repressed by Snail in the mesoderm. Natural or experimentally induced infections by fungi or bacteria elicit a specific response in both adult flies and larvae. The proteoglycans of Gram-positive and Gram-negative bacteria are sensed by distinct pattern recognition proteins called PGRPs (peptidoglycan recognition proteins [ 3 ] . Different PRGPs cooperate to activate the Toll pathway. The activation of PGRP-SA by Gram- positive bacteria leads to Spatzle cleavage [ 4 ] . Fungal infection also leads to the cleavage of Spatzle, but the proteolytic cascade in this case involves the circulating serine protease Persephone and its serine protease inhibitor, Necrotic [ 5 , 6 , 7 ] . Circulating PGRP-SA receptor activates the Toll pathway upon detection of Lysine-type PGN which is a major component of the cell wall of many Gram-positive bacterial strains. GNBP1 (Gram-Negative Binding Protein 1) associates with PGRP-SA and this complex activates a downstream proteolytic cascade that leads to the cleavage of Spatzle, which then activates the Toll transmembrane receptor. In addition, four other serine proteases, namely Spirit, Spheroide, and Sphinx1 and 2, were identified in response to both fungi and Gram-positive bacteria infections. Thus, PGRP-SA and GNBP1 define a Gram-positive-specific branch of Toll receptor activation. PGRP-SD also belongs to this branch and is required for the detection of other Gram-positive and negative bacterial strains. In short, the maturation of SPZ activates Toll in both early embryo and immune response and is controlled by different sets of proteases [ 8 , 9 ] . To reproduce biological data during SPZ processing, we define four initial states corresponding the biological process involved. All these initial state lead to the formation of the active form of SPZ.\n","id":38,"section":"models","summary":"During DV patterning, a regulatory cascades composed by three dorsal group genes gastrulation-defective, snake and easter, encoding serine proteases, lead to the cleavage of Spatzle (SPZ), that in turn activates the Toll-dorsal signaling pathway [1, 2 ] .","tags":null,"title":"Drosophila SPATZLE Processing pathway","uri":"/models/2013-drosophila-spz/"},{"content":"Toll was initially discovered as an essential component of the pathway that establishes the dorsal, ventral axis of the early Drosophila embryo. If any component in that genetic pathway is missing, no ventral or lateral cell types develop and the resulting embryos lack all mesoderm and the entire nervous system [1] . Fungal and Gram-positive bacterial infections in Drosophila also stimulate the Toll pathway. Activation of Toll leads to recruitment of three cytoplasmic proteins, which are MYD88, Tube and Pelle, to form the signalling complex underneath the cell membrane [ 2 ] . Subsequently, through interactions via death domains, assembly of the signalling complex containing MYD88, Tube and Pelle occurs [ 2 , 3 ] . From this complex, signalling proceeds through the phosphorylation and degradation of the Drosophila IkB factor Cactus. In non signaling conditions, Cactus is bound to Dorsal or Dorsal-related immunity factor (DIF), inhibiting their activity and nuclear localization. Pelle is the only kinase reported for Cactus phosphorylation. After phosphorylation, nuclear translocation of Dorsal/DIF leads to activation of transcription of several sets of target genes [ 3 , 4 ] . To reproduce pathway signalling dynamics, we define two initial states corresponding to no signalling conditions (no ligand binding) and to signalling conditions (binding of SPZ to the receptor Toll).\n","id":39,"section":"models","summary":"Toll was initially discovered as an essential component of the pathway that establishes the dorsal, ventral axis of the early Drosophila embryo. If any component in that genetic pathway is missing, no ventral or lateral cell types develop and the resulting embryos lack all mesoderm and the entire nervous system [1] .","tags":null,"title":"Drosophila Toll Signalling pathway","uri":"/models/2013-drosophila-toll/"},{"content":"VEGF (also called PDGF or PVF) pathway participates in different developmental processes, including border cell migration, hemocyte migration and survival, thorax closure during metamorphosis, the rotation and dorsal closure of the male terminalia. and embryonic salivary gland tissue migration. The ability of PVR to activate the MAP-kinase pathway is important for control of cell growth and differentiation in other tissues. Three genes in the Drosophila genome code for PVR ligands: PVF1, PVF2, and PVF3. Binding of one of the ligands (PVF1, 2 or 3) to the receptor PVR triggers the canonical DRK/SOS/RAS/RAF/DSOR1/RL pathway [1, 2 , 3 , 4 , 5 ] . DOF is needed to assemble the PVR receptor and allow it to auto-phosphorylate, likely as an adaptor that links the receptor to RAS pathway. DOF is a cytoplasmic protein which is expressed ubiquitously only in cells that express the FGF receptors. It contains an ankyrin repeat, a coiled-coil structure and many tyrosines within environments that suggest that if phosphorylated they act as binding sites for the SH2 domains of proteins such as DRK or CSW [ 6 ] . The SH2-domain-containing protein DRK recruits the guanine nucleotide exchange factor, Son of sevenless (SOS), to catalyze the exchange of GDP bound to RAS for GTP, thereby activating RAS with the help of activated KSR. RAS promotes the activation of RAF, leading to the activation of DSOR1, and ultimately to that of the MAP kinase Rolled (RL ). Rolled can activate transcription, both through inactivation of transcriptional co-repressors such as AOP, as well as through the activation of transcription factors such as the ETS-domain-containing protein Pointed (PNT) [ 7 , 8 ] . The activation of PNT is a major output of the pathway. It is either phosphorylated by MAP kinase to produce an active transcriptional activator (PointedP2), or transcriptionally induced by MAP kinase to produce a constitutive transcriptional activator (PointedP1). Sprouty (STY) acts downstream of the receptor, but upstream of RAS1 and RAF, by recruiting GAP1 and blocking the ability of DRK to bind to its positive effector. We have considered three typical initial states corresponding to i. ligands binding in wild-type signalling enabling situation (VEGF_signalling), ii. ligand binding in the presence of the inhibitor Sprouty (Sprouty_inhibition), iii. absence of ligand (No_signalling).\n","id":40,"section":"models","summary":"VEGF (also called PDGF or PVF) pathway participates in different developmental processes, including border cell migration, hemocyte migration and survival, thorax closure during metamorphosis, the rotation and dorsal closure of the male terminalia. and embryonic salivary gland tissue migration.","tags":null,"title":"Drosophila VEGF Signalling pathway","uri":"/models/2013-drosophila-vegf/"},{"content":"In the absence of WG, the protein complex composed by Axin, Shaggy (SGG or ZW3) and APC sequesters and ubiquitinilates Armadillo, leading to a Slmb- dependant degradation by the proteasome. In the absence of ARM, PAN binds to GRO to repress WG targets. Binding of Wingless to Arrow (ARR) or Frizzled (FZ) triggers a set of reactions, starting with the activation of Dishevelled, which in turn inhibits the AXN-SGG-APC complex. This leads (with the help of HIPK) to the accumulation and the stabilisation of ARM. Next, ARM translocates into the nucleus and binds Pangolin (PAN). Then, the ARM/PAN complex with the help of other cofactors (LGS, Nej, Pygo and Hyx) activates the transcription of WG targets. During some patterning processes as in wing disc, Nemo can inhibit PAN and thereby controls the level of WG signalling. To study dynamically the WG signalling pathway, we define two initial states corresponding to the binding of WG ligand and to the absence of binding condition. From these two initial states, we compute the resulting stable states recapitulating the activation or the non activation of the pathway, respectively. For more details on Dpp signalling pathway regulation see [1, 2 , 3 , 4 , 5 ] .\n","id":41,"section":"models","summary":"In the absence of WG, the protein complex composed by Axin, Shaggy (SGG or ZW3) and APC sequesters and ubiquitinilates Armadillo, leading to a Slmb- dependant degradation by the proteasome. In the absence of ARM, PAN binds to GRO to repress WG targets.","tags":null,"title":"Drosophila Wg Signalling pathway","uri":"/models/2013-drosophila-wg/"},{"content":"The larval development of the Drosophila melanogaster wings is organized by the protein Wingless, which is secreted by cells adjacent to the dorsal–ventral (DV) boundary. Two signaling processes acting between the second and early third instars and between the mid- and late third instar control the expression of Wingless in these boundary cells.\nA preliminary model (Apterous-dependent network) was presented in [1] , for the inter-cellular regulatory network activating Notch at the dorsal–ventral boundary in the wing imaginal disc of Drosophila. This model focussed on the cross-regulations between five genes (within and between two cells), which implements the dorsal–ventral border in the developing imaginal disc.\nThis refined model integrates both signaling processes into a multivalued model encompassing four cells, i.e., a boundary and a flanking cell at each side of the boundary. Computer simulations of this model enable a qualitative reproduction of the main wild-type and mutant phenotypes described in the experimental literature. During the first signaling process, Notch becomes activated by the first signaling process in an Apterous-dependent manner. In silico perturbation experiments show that this early activation of Notch is unstable in the absence of Apterous. However, during the second signaling process, the Notch pattern becomes consolidated, and thus independent of Apterous, through activation of the paracrine positive feedback circuit of Wingless. Consequently, we propose that appropriate delays for Apterous inactivation and Wingless induction by Notch are crucial to maintain the wild- type expression at the dorsal–ventral boundary. Finally, another mutant simulation shows that cut expression might be shifted to late larval stages because of a potential interference with the early signaling process.\n","id":42,"section":"models","summary":"The larval development of the Drosophila melanogaster wings is organized by the protein Wingless, which is secreted by cells adjacent to the dorsal–ventral (DV) boundary. Two signaling processes acting between the second and early third instars and between the mid- and late third instar control the expression of Wingless in these boundary cells.","tags":null,"title":"DV boundary formation of the Wing imaginal disc","uri":"/models/2006-drosophila-dv-boundary/"},{"content":"In breast cancer, overexpression of the transmembrane tyrosine kinase ERBB2 is an adverse prognostic marker, and occurs in almost 30% of the patients. For therapeutic intervention, ERBB2 is targeted by monoclonal antibody trastuzumab in adjuvant settings; however, de novo resistance to this antibody is still a serious issue, requiring the identification of additional targets to overcome resistance. In this study, we have combined computational simulations, experimental testing of simulation results, and finally reverse engineering of a protein interaction network to define potential therapeutic strategies for de novo trastuzumab resistant breast cancer.\nFirst, we employed Boolean logic to model regulatory interactions and simulated single and multiple protein loss-of-functions. Then, our simulation results were tested experimentally by producing single and double knockdowns of the network components and measuring their effects on G1/S transition during cell cycle progression. Combinatorial targeting of ERBB2 and EGFR did not affect the response to trastuzumab in de novo resistant cells, which might be due to decoupling of receptor activation and cell cycle progression. Furthermore, examination of c-MYC in resistant as well as in sensitive cell lines, using a specific chemical inhibitor of c-MYC (alone or in combination with trastuzumab ), demonstrated that both trastuzumab sensitive and resistant cells responded to c-MYC perturbation.\nIn this study, we connected ERBB signaling with G1/S transition of the cell cycle via two major cell signaling pathways and two key transcription factors, to model an interaction network that allows for the identification of novel targets in the treatment of trastuzumab resistant breast cancer. Applying this new strategy, we found that, in contrast to trastuzumab sensitive breast cancer cells, combinatorial targeting of ERBB receptors or of key signaling intermediates does not have potential for treatment of de novo trastuzumab resistant cells. Instead, c-MYC was identified as a novel potential target protein in breast cancer cells.\n","id":43,"section":"models","summary":"In breast cancer, overexpression of the transmembrane tyrosine kinase ERBB2 is an adverse prognostic marker, and occurs in almost 30% of the patients. For therapeutic intervention, ERBB2 is targeted by monoclonal antibody trastuzumab in adjuvant settings; however, de novo resistance to this antibody is still a serious issue, requiring the identification of additional targets to overcome resistance.","tags":null,"title":"ERBB receptor-regulated G1/S transition","uri":"/models/2009-human-erbb-g1s-transition/"},{"content":"The following exports consider only the graph structure, and can thus be applied to all types of graph in GINsim.\nThe graph structure can be exported for use in dedicated graph visualization software, which can handle some graphs considered as too large for viewing in GINsim directly. These exports only consider the graph structure (graphical attributes are lost). The following formats are supported:\nGraphviz Files in the DOT language can be opened using the graph visualization software Graphviz.\nBioLayout Biolayout, is a graph visualization software focussing on biological networks.\nCytoscape Cytoscape (see www.cytoscape.org), is also used for the analysis of biological networks. While GINsim can export regulatory graphs for cytoscape, this format is not yet available for other types of graphs.\n","id":44,"section":"doc","summary":"Export the structure of a graph","tags":null,"title":"Export graph structure","uri":"/doc/formats/graph-structure/"},{"content":"The graph view can be exported as an image in the PNG format. This export considers only the visual appareance of the graph, and can thus be applied to all types of graph in GINsim.\nThe view can also be exported in the Scalable Vector Graphic (SVG) format. Tools like Inkscape, can then be used to display, modify and export SVG files to virtually any image format.\n","id":45,"section":"doc","summary":"Export graph view as image","tags":null,"title":"Export graph view","uri":"/doc/formats/view/"},{"content":"Starting from the Hierarchical Transition Graph (HTG) it is possible to generate the underlying STG. The generated STG will contain all the states and edges corresponding to the set of selected hierarchical nodes. The computed STG can also be extended to the states in the immediate neighborhood of the states of the selected hierarchical nodes.\nNode selection in the HTG Once the HTG is generated, it\u0026rsquo;s possible to select the set of HTG nodes to be expanded, using the mouse together with the Ctrl (Cmd on Mac OS X) key pressed.\nAfter the selection of nodes, the HTG expansion tool can be launched through the Expand hierarchical nodes option of the Tools menu.\n  Selection of HTG nodesSelection of HTG nodes to be expanded in the corresponding STG.\n  Running the STG extraction tool   STG extraction dialogDialog used to run the STG extraction tool. This dialog presents an option to include the states in the immediate neighborhood of the selected states, and another for the definition/selection of perturbations to the model.\n  The Expand hierarchical nodes option of the Tools menu, will open a dialog GUI where the user is presented with two options:\n The option to include the states in the immediate neighborhood of the selected states, enriching the resulting STG; The option to define and/or select a perturbation to be applied to the model, which will affect transitions between states in the STG.  ","id":46,"section":"doc","summary":"Build the STG underlying parts of a HTG","tags":null,"title":"Extract STG from HTG","uri":"/doc/analyse_tg/htg/"},{"content":"The \u0026ldquo;Find node\u0026rdquo; action permits to find and select nodes in a Logical Regulatory Graph or states in a Transition Graph.\nFor both graph types, selecting the \u0026ldquo;Find node\u0026rdquo; action in the \u0026ldquo;Graph\u0026rdquo; menu, opens a configuration dialog box which presents a list of all the nodes of the graph. The user can filter this list of nodes by typing (partially or completely) the name of a node. Then by selecting the desired node in the list, the node will be selected in the corresponding Graph window and consequently the corresponding node attributes bellow.\n  Search for a node in a Logical Regulatory Graph\n  ","id":47,"section":"doc","summary":"Search for nodes in LRGs and STGs","tags":null,"title":"Find node","uri":"/doc/gui/find-node/"},{"content":"The \u0026ldquo;Find path\u0026rdquo; action enable the determination of paths between pairs of nodes in a Logical Regulatory Graph or between pairs of states in a Transition Graph.\nFor both graph types, selecting the \u0026ldquo;Find path\u0026rdquo; action in the \u0026ldquo;Graph\u0026rdquo; menu, opens a configuration dialog box which allows for the specification of the starting node/state, the target node/state, and optional intermediate nodes/states (using the \u0026ldquo;+\u0026rdquo; and \u0026ldquo;-\u0026rdquo; buttons to add and remove them, respectively). Once the set of nodes/states is defined, selecting \u0026ldquo;Run\u0026rdquo; will make GINsim compute the shortest path and highlight it on the corresponding LRG/STG. If several paths exist between these states, the first encountered shortest path is returned. Additionally, a button is available to alternate between the original LRG/STG colors and the computed path.\n  Search for a path in the state transition graphThe search tool has found a path from the state 0110to 0311, involving four steps.\n  TODO: figure to find path in a LRG\n","id":48,"section":"doc","summary":"Define and search for paths in LRGs and STGs","tags":null,"title":"Find path","uri":"/doc/gui/find-path/"},{"content":"This model is a direct transcription of the Boolean model published by Davidich \u0026amp; Bornholdt [1] . Dynamical rules are defined on the basis of the network structure, as the sum of the positive and negative influences exerted on each nodes by its regulators. (Fig. 1, bottom left in [ 2 ] ; see text for more details).\nThe model yields a main stable state, corresponding to G0/G1, that gathers most trajectories in the state transition graph; and several alternative, artefactual states.\nThe two Boolean components representing the different levels of activity of Cdc2_Cdc13 have been replaced by a ternary component. In addition, the loops originally placed on Start, SK, PP, and Slp1 nodes have been removed, as they do not represent true auto-regulations, and are compensated by the introduction of priorities to account for the maintenance of the start signal and its effect on Rum1 and Ste9.\nFor proper logical rules, the model has a single stable state, corresponding to the G1 state of Davidich \u0026amp; Bornholdt (with only Ste9, Rum1 and Wee1_Mick1 activated). This means that the other 11 spurious stable states obtained by these authors have been eliminated.\nActivation of Start leads to SK inactivation and then to inhibition of Ste9 and Rum 1, launching a to a sequence of state transitions matching that defined by Davidich \u0026amp; Bornholdt [ 1 ] , as well as available kinetic data (see Model Documentation for proper setting of the logical simulation).\n","id":49,"section":"models","summary":"This model is a direct transcription of the Boolean model published by Davidich \u0026amp; Bornholdt [1] . Dynamical rules are defined on the basis of the network structure, as the sum of the positive and negative influences exerted on each nodes by its regulators.","tags":null,"title":"Fission Yeast Cell Cycle (Davidich and Bornholdt, 2008)","uri":"/models/2008-fission-yeast-cell-cycle/"},{"content":"This manuscript focuses on the formal analysis of the gap-gene network involved in Drosophila segmentation. The gap genes are expressed in defined domains along the anterior–posterior axis of the embryo, as a response to asymmetric maternal information in the oocyte. Though many of the individual interactions among maternal and gap genes are reasonably well understood, we still lack a thorough understanding of the dynamic behavior of the system as a whole. Based on a generalized logical formalization, the present analysis leads to the delineation of:\n The minimal number of distinct, qualitative, functional levels associated with each of the key regulatory factors (the three maternal Bcd, Hb and Cad products, and the four gap Gt, Hb, Kr and Kni products). The most crucial interactions and regulatory circuits of the earliest stages of the segmentation process. The ordering of different regulatory interactions governed by each of these products according to corresponding concentration scales. The role of gap-gene cross-interactions in the transformation of graded maternal information into discrete gap-gene expression domains. The proposed model allows not only the qualitative reproduction of the patterns of gene expression characterized experimentally, but also the simulation and prediction of single and multiple mutant phenotypes.  ","id":50,"section":"models","summary":"This manuscript focuses on the formal analysis of the gap-gene network involved in Drosophila segmentation. The gap genes are expressed in defined domains along the anterior–posterior axis of the embryo, as a response to asymmetric maternal information in the oocyte.","tags":null,"title":"Gap Model","uri":"/models/2001-drosophila-gap/"},{"content":"The \u0026ldquo;layout submenu of the \u0026ldquo;view\u0026rdquo; menu provides some tools to place graph components automatically. These layout tools are mostly useful for graphs computed by GINsim, such as state transition graphs. Note that GINsim only offers very simple layout tools. For complex cases, dedicated tools such as graphviz or cytoscape can provide much better results. The following layouts are available:\nLevel layout Nodes are placed on rows, nodes without any incoming arc being placed at the top and nodes without any outgoing arc at the bottom.\n  Level layout example   Ring layout Nodes are placed on three concentric rings, source nodes at the center, terminal nodes at the periphery.\n  Ring layout example   STG layouts State transition graphs have additional layout methods which place components on a grid based on the activity levels.\n","id":51,"section":"doc","summary":"Automatic positionning of graph elements","tags":null,"title":"Graph layouts","uri":"/doc/gui/layout/"},{"content":"The interactive graph view lets the user select one or multiple components (nodes or edges). The selection affects the surrounding graphical interface (properties for the selected element(s) is shown), as well as some actions which use the selected components as input.\nInteractive selection Components can be selected directly on the graph view: clicking on a component selects it. Note that a simple click will first clear the current selection. Maintaining the control key allows to add or remove components to the selection.\nSelection tools The Graph menu contains submenus to update the selection. The classical Select all and Invert selection are provided and can be restricted to nodes or edges. The Extend selection submenu allows to add neighbour items to the current selection.\n","id":52,"section":"doc","summary":"Handle the selected items in a graph","tags":null,"title":"Graph selection","uri":"/doc/gui/selection/"},{"content":"In the default edit mode, the graph view allows to set the position of nodes by dragging it. Furthermore, the path followed by an edge can be controlled using intermediate points, which are shown as red squares for the selected edge. Drag such an intermediate point to move it, or directly drag the edge itself to create and place a new intermediate point. These points can be removed with a right-click (or control-click).\nVisual properties of the graph elements can be defined in the Style tab.\nView menu   The View menuThe View menu allows to control the zoom factor and to set some display options.\n  The View menu encompasses the following items:\n Zoom In/Out and Normal Size: to control the zoom factor. Nodes to front: to move all nodes to front (above arcs) or to back (makes selection easier).  The view menu also enables to apply Automatic layouts on graphs.\n","id":53,"section":"doc","summary":"Editing the graph view","tags":null,"title":"Graph view","uri":"/doc/gui/graph/"},{"content":"Named groups of states can be defined for the regulatory graph and used for example as starting point for the :doc:simulation.\n  Initial state definition panelEach line in the table of intial states has a name and provides a value or a range for one or more components. Components which are not restricted are denoted by stars (\u0026quot;*\u0026quot;) in the table.\n  Each row of the table corresponds to a set of states, where activity levels are specified for each component in the corresponding table cell. Each component can use all of its possible levels (denoted by a star (\u0026quot;\u0026quot;)), a single level or any subset of levels, separated by semicolons (;). Intervals can also be defined using a dash (\u0026ldquo;0-2\u0026rdquo; denotes all levels from 0 to 2, included). The special value \u0026ldquo;m\u0026rdquo; denotes the maximal level of the component. For example, \u0026ldquo;0;2-4\u0026rdquo; means \u0026ldquo;0 or values between 2 and 4\u0026rdquo; and is identical to \u0026ldquo;0;2;3;4\u0026rdquo;. \u0026ldquo;1-m\u0026rdquo; means \u0026ldquo;any activity (from 1 to the max)\u0026quot;. The default, denoted by a \u0026ldquo;\u0026quot;, covers all possible values (it is thus the same as \u0026ldquo;0-m\u0026rdquo;).\nInitial states can be reordered, deleted and duplicated using the buttons on top of the table.\nA value can be entered in many cells at once using multiple selection. ","id":54,"section":"doc","summary":"Define initial states for regulatory graph","tags":null,"title":"Initial states","uri":"/doc/simulation/initial_states/"},{"content":"The local graph is a subgraph of the full LRG encompassing only the interactions which are active in the neighbourhood of one specific state [1] .\nThe highlight local graph tool determines these active interactions and highlights them in the graph view.\nUsage The Highlight local graph entry on the Graph menu opens the local graph computation dialog. This dialog provides an interface divided into three main sections:\n The state definition table, where the user can specify the value of each component defining a (set of) state(s). The perturbation selection, where the user can select (and define new) perturbations. The execution options, where the user can specify if for every change in the table the local graph should be automatically updated, and restore the original graph colors if needed.    Example of local graph highlightLeft: The highlight local graph dialog box, where the (set of) state(s) are specified. Right: The logical regulatory graph, where the active interactions are highlighted.\n  After running this tool, the logical regulatory graph interactions will change colour depending on their activation type. Their colour code representation will be: green, for interactions having an activatory effect; red, for interactions with an inhibitory effect; and grey, for interactions without an effect.\nWhen selecting this tool for a state transition graph, it will open the associated regulatory graph and offer additional options in the dialog box, allowing to use the selected states. Availability Highlight local graph was implemented in GINsim 3.0.\n","id":55,"section":"doc","summary":"Highlight the interactions in the neighbourhood of a state","tags":null,"title":"Local Graph","uri":"/doc/static_analysis/local/"},{"content":"We have integrated novel experimental results with previous data about the roles of Nodal and BMP pathways in early development of Paracentrotus lividus in the form of a regulatory graph, which was complemented with logical rules, thereby enabling the simulation of cell responses to varying signalling inputs along the dorsal-ventral axis. This logical model was then extended to account for ligand diffusion and enable multicellular simulations, which accurately recapitulated gene expression in wild type embryos, accounting for the specification of the three main ectodermal regions, namely ventral ectoderm, ciliary band and dorsal ectoderm, and further recapitulated sophisticated mutant phenotypes. Finally, using a stochastic extension of the logical formalism, we performed more quantitative temporal simulations, which revealed a dominance of the BMP pathway over the Nodal pathway, and pointed to the rate of Smad activation as a key parameter for D/V patterning of the embryo.\nThe links below enable the download of i) the unicellular GINsim model (zginml format, to be open with GINsim 3.0), the multicellular model (peps format, to be open with Epilog v1.1.1), and ii) the jupyter notebook containing the code of all the analyses (to be used with the colomoto-docker image).\n","id":56,"section":"models","summary":"We have integrated novel experimental results with previous data about the roles of Nodal and BMP pathways in early development of Paracentrotus lividus in the form of a regulatory graph, which was complemented with logical rules, thereby enabling the simulation of cell responses to varying signalling inputs along the dorsal-ventral axis.","tags":null,"title":"Logical model of the regulatory network controlling dorsal-ventral axis specification in the sea urchin P. lividius","uri":"/models/2020-seaurchin-dv-axis/"},{"content":"Blood cells are derived from a common set of hematopoietic stem cells, which differentiate into more specific progenitors of the myeloid and lymphoid lineages, ultimately leading to differentiated cells. This developmental process is controlled by a complex regulatory network involving cytokines and their receptors, transcription factors and chromatin remodelers. Based on public and novel data from molecular genetic experiments (qPCR, western blots, EMSA), along with genome-wide assays (RNA-seq, ChIP-seq), we defined a logical model recapitulating cytokine-induced differentiation of common progenitors, the effect of various reported gene knock-downs, as well as reprogramming of pre-B cells into macrophages induced by ectopic expression of specific transcription factors.\nNote: This model is also available at BioModels database BioModels ID: 1610240000.\n","id":57,"section":"models","summary":"Blood cells are derived from a common set of hematopoietic stem cells, which differentiate into more specific progenitors of the myeloid and lymphoid lineages, ultimately leading to differentiated cells. This developmental process is controlled by a complex regulatory network involving cytokines and their receptors, transcription factors and chromatin remodelers.","tags":null,"title":"Lymphoid and myeloid cell specification and transdifferentiation","uri":"/models/2017-mammal-lymphoid-myeloid-transdifferentiation/"},{"content":"A number of bacterial and viral genes take part in the decision between lysis and lysogenisation in temperate bacteriophages. In the case of the bacteriophage lambda, at least 5 viral regulatory products (CI, Cro, CII, N and CIII) and several bacterial genes are involved (see [1] for an excellent overview).\nFor the sake of explanation clarity, we proceed in two steps. We present a model of the core of the lambda regulatory network, constituted by the cross-regulation between the regulatory genes CI (encoding the repressor) and Cro (see phage2.zginml). In a second step, we propose a four element model (see phageLambda4.zginml), encompassing the roles of the regulatory genes CII and N in addition of CI and Cro.\nNote that in [ 2 ] , we considered a modified version of the four component model: phage4 (alternate).zginml. This paper deals with the Petri net representation of logical models. The versions of the two and four component models of the phage lambda switch are available in the form of Petri nets (INA format).\n","id":58,"section":"models","summary":"A number of bacterial and viral genes take part in the decision between lysis and lysogenisation in temperate bacteriophages. In the case of the bacteriophage lambda, at least 5 viral regulatory products (CI, Cro, CII, N and CIII) and several bacterial genes are involved (see [1] for an excellent overview).","tags":null,"title":"Lysis vs lysogeny decision in the phage lambda","uri":"/models/1995-lambda-lysis-lysogeny/"},{"content":"The Mitogen-Activated Protein Kinase (MAPK) network consists of tightly interconnected signalling pathways involved in the control of diverse cellular processes, including cell cycle, survival, apoptosis and differentiation. Based on an extensive analysis of published data, we have built a comprehensive and generic reaction map for the MAPK signalling network, using CellDesigner software.\nIn order to explore the MAPK responses to different stimuli and better understand their contributions to cell fate decision, we have considered the most crucial components and interactions and encoded them into a logical model, using the software GINsim. Our logical model analysis particularly focuses on urinary bladder cancer, where MAPK network deregulations have often been associated with specific phenotypes.\nTo cope with the combinatorial explosion of the number of states, we have applied novel algorithms for model reduction and for the compression of state transition graphs, both implemented into the software GINsim. The results of systematic simulations for different signal combinations and network perturbations were found globally coherent with published data. In silico experiments further enabled us to delineate the roles of specific components, cross-talks and regulatory feedbacks in cell fate decision. Finally, tentative proliferative or anti-proliferative mechanisms can be connected with established bladder cancer deregulations, namely Epidermal Growth Factor Receptor (EGFR) over-expression and Fibroblast Growth Factor Receptor 3 (FGFR3) activating mutations.\n","id":59,"section":"models","summary":"The Mitogen-Activated Protein Kinase (MAPK) network consists of tightly interconnected signalling pathways involved in the control of diverse cellular processes, including cell cycle, survival, apoptosis and differentiation. Based on an extensive analysis of published data, we have built a comprehensive and generic reaction map for the MAPK signalling network, using CellDesigner software.","tags":null,"title":"MAPK network","uri":"/models/2013-mammal-mapk/"},{"content":"Based on an exhaustive curation of the existing literature and using the software CellDesigner, we have built and annotated a comprehensive molecular map for the FceRI and FcgRIIb signalling pathways, which play a key role in mast cell activation in mammals. Using this map and the logical modelling software GINsim, we have derived a logical model recapitulating the most salient features of mast cell activation. This model can be used to explore the dynamical properties of the system and its responses to different stimuli, in normal or mutant conditions.\n","id":60,"section":"models","summary":"Based on an exhaustive curation of the existing literature and using the software CellDesigner, we have built and annotated a comprehensive molecular map for the FceRI and FcgRIIb signalling pathways, which play a key role in mast cell activation in mammals.","tags":null,"title":"Mast cell activation","uri":"/models/2014-mammal-mast-cell-activation/"},{"content":"Epithelial to Mesenchymal Transition (EMT) has been associated with cancer cell heterogeneity, plasticity and metastasis. However, the extrinsic signals supervising these phenotypic transitions remain elusive. To identify microenvironmental signals controlling cancer-associated phenotypes amid the EMT continuum, we defined a logical model of the EMT cellular network that access the qualitative degrees of cell adhesions by adherent junctions and focal adhesions, two features affected during EMT.\nModel attractors could recover epithelial, mesenchymal and hybrid phenotypes. In silico simulations provided evidences that hybrid phenotypes may arise through independent molecular paths, involving stringent extrinsic signals. Of particular interest, model predictions and their experimental validations indicated that:\n ECM stiffening is a prerequisite for cells overactivating FAK-SRC to upregulate SNAIL1 and acquire a mesenchymal phenotype. FAK-SRC inhibition of cell-cell contacts through the Receptor Protein Tyrosine Phosphates kappa leads to the acquisition of a full mesenchymal rather than a hybrid phenotype.  Altogether, our computational and experimental approaches permitted to identify critical microenvironmental signals controlling hybrid EMT phenotypes, and indicated that EMT involves multiple molecular programs.\n","id":61,"section":"models","summary":"Epithelial to Mesenchymal Transition (EMT) has been associated with cancer cell heterogeneity, plasticity and metastasis. However, the extrinsic signals supervising these phenotypic transitions remain elusive. To identify microenvironmental signals controlling cancer-associated phenotypes amid the EMT continuum, we defined a logical model of the EMT cellular network that access the qualitative degrees of cell adhesions by adherent junctions and focal adhesions, two features affected during EMT.","tags":null,"title":"Microenvironment control of hybrid Epithelial-Mesenchymal phenotypes","uri":"/models/2020-mammal-emt-microenvironment/"},{"content":"This Boolean model displays the subtle role of miR-9 in the course of neural specification in zebrafish.\nFigure 1: Green arrows represent positive regulations, whereas red T arrows represent inhibitory interactions. Dotted lines represent suspected (but not yet molecularly characterized) direct or indirect interactions, which prevent the expression of a gene in the progenitor or neuronal precursor states, such as elavl3/HuC inhibition in progenitors.\nThe node P denotes a proliferating progenitor state (P=1, N=0). It is defined by the expression of Her6 and/or Zic5. The node N denotes the commitment of a progenitor into a neural precursor (P=0, N=1). By inhibiting genes with opposite effect on neural differentiation, miR-9 activity generates an ambivalent state (P=0, N=0) poised for responding to both progenitor maintenance and commitment cues.\nModel simulations qualitatively recapitulate all the experimental results presented in Coolen et al (submitted), for the wild-type as well as for various mutant situations (including loss-of-functions, ectopic gene expressions, and miR-9 target protection by morpholinos).\n","id":62,"section":"models","summary":"This Boolean model displays the subtle role of miR-9 in the course of neural specification in zebrafish.\nFigure 1: Green arrows represent positive regulations, whereas red T arrows represent inhibitory interactions. Dotted lines represent suspected (but not yet molecularly characterized) direct or indirect interactions, which prevent the expression of a gene in the progenitor or neuronal precursor states, such as elavl3/HuC inhibition in progenitors.","tags":null,"title":"miR-9 and timing of neurogenesis (Coolen 2012)","uri":"/models/2012-zebrafish-mir9-neurogenesis/"},{"content":"The reduction of regulatory graphs allows to extract a \u0026ldquo;simplified\u0026rdquo; regulatory graph where a set of components are hidden. To keep a consistent dynamical behaviour, the logical rules associated with the targets of each hidden component account for the (indirect) effects of its regulators. This construction of reduced models preserves crucial dynamical properties of the original model, including stable states and more complex attractors. Furthermore, the relationship between the attractor configuration of the original model and those of reduced models is formally established.\nUsage The reduction tool is available in the Actions menu. It open a configuration dialog in which the user can select the components that will be hidden. Several configuration strategies can be defined. Running the tool leads to the construction of a reduced model where the selected components have been removed.\nSome reductions are not possible (an auto-regulated component can not be hidden using this method), if a reduction fails, GINsim will show an error message, listing the components that could not be hidden and proposing to continue with the result of the partial reduction.\nNote that in some cases, the reduction may only be possible in a precise order (but the result does not not change with the order). When blocked, GINsim will try alternate orders for the remaining components, but not for the components which have already been succesfully reduced. In such cases, it may be necessary to provide the list of components to reduce in several steps to force the use of the correct order.\nOutput stripping Outputs are components which do not regulate others. As such, these components have no impact on the attractors that will be reached in a simulation. These output components can be automatically removed when performing a simulation or some other actions on a model. To instruct GINsim to remove outputs, use the strip outputs checkbox next to the perturbation selection box.\nScript mode The reduction tool can also be used in script mode. It then relies on a previously defined reduction strategy.\nAvailability and further reading This method was implemented in GINsim 2.4 [1] . The support for output stripping was added in GINsim 3.0 [ 2 ] .\n","id":63,"section":"doc","summary":"Removing components from a LRG, preserving dynamical properties","tags":null,"title":"Model reduction","uri":"/doc/modify/reduction/"},{"content":"Understanding the etiology of metastasis is very important in clinical perspective, since it is estimated that metastasis accounts for 90% of cancer patient mortality. Metastasis results from a sequence of multiple steps including invasion and migration. The early stages of metastasis are tightly controlled in normal cells and can be drastically affected by malignant mutations; therefore, they might constitute the principal determinants of the overall metastatic rate even if the later stages take long to occur. To elucidate the role of individual mutations or their combinations affecting the metastatic development, a logical model has been constructed that recapitulates published experimental results of known gene perturbations on local invasion and migration processes, and predict the effect of not yet experimentally assessed mutations. The model has been validated using experimental data on transcriptome dynamics following TGF-β-dependent induction of Epithelial to Mesenchymal Transition in lung cancer cell lines. A method to associate gene expression profiles with different stable state solutions of the logical model has been developed for that purpose. In addition, we have systematically predicted alleviating (masking) and synergistic pairwise genetic interactions between the genes composing the model with respect to the probability of acquiring the metastatic phenotype. We focused on several unexpected synergistic genetic interactions leading to theoretically very high metastasis probability. Among them, the synergistic combination of Notch overexpression and p53 deletion shows one of the strongest effects, which is in agreement with a recent published experiment in a mouse model of gut cancer. The mathematical model can recapitulate experimental mutations in both cell line and mouse models. Furthermore, the model predicts new gene perturbations that affect the early steps of metastasis underlying potential intervention points for innovative therapeutic strategies in oncology.\n","id":64,"section":"models","summary":"Understanding the etiology of metastasis is very important in clinical perspective, since it is estimated that metastasis accounts for 90% of cancer patient mortality. Metastasis results from a sequence of multiple steps including invasion and migration.","tags":null,"title":"Molecular Pathways Enabling Tumour Cell Invasion and Migration","uri":"/models/2015-mammal-tumor-invasion-migration/"},{"content":"In budding yeast, the morphogenetic checkpoint (MCP) relies upon inhibitory phosphorylation of Cdc2/Cyclin B by Swe1 to condition entry into mitosis to the formation of a bud. Taking inspiration in the ODE model published by Ciliberto et al. (2003) [1], we have developed a logical model of the MCP, with the aim to plug it to our core engine of the budding yeast cell cycle (cf. [2]).\nThe activity of Cdc28/Clb2 is controlled by the balance between Swe1 and Mih1. Swe1, the budding yeast homologue of the tyrosine kinase wee1, inhibits Cdc28 by phosphorylation, whereas the phosphatase Mih1 (homologue of Cdc25) removes the inhibitory phosphate. Swe1 itself is inhibited by phosphorylation by Cdc28/Clb2, in a positive feed-back loop. Based on Ciliberto\u0026rsquo;s model, we assume that Swe1 is also somehow modified by Hsl1, a protein kinase activated by bud formation, and that this modification of unknown nature - as Swe1 does not appear to be a substrate of Hsl1- has an inhibitory effect on Swe1. The checkpoint is reinforced by a MAPK pathway that inhibits Mih1 through Mpk1 activity in absence of a bud. An important point of the MCP is the possibility for the cell to undergo adaptation, that is to evade the checkpoint and enter mitosis in absence of a bud after some time. Ciliberto\u0026rsquo;s model supports the hypothesis that failure to make a bud creates a second threshold for mass for the G2-M transition (the first threshold being at Start). Mass impacts cell progression by increasing the synthesis of the cyclins, and in particular CycB that is required for entry into mitosis (see the core model -LINK- for details). Here, we have introduced a second threshold for the MASS variable, to represent the idea that increased CycB synthesis can yield enough CycB activity to overcome inhibition by Swe1. Our model accounts for the wild-type as well as 14 mutants phenotypes described by Ciliberto et al. and in Harrison et al (2001) [3] in terms of entry into mitosis – monitored by Clb2 activation. This model has then been to our model of the core cell cycle engine of the budding yeast (see coupled model).\n","id":65,"section":"models","summary":"In budding yeast, the morphogenetic checkpoint (MCP) relies upon inhibitory phosphorylation of Cdc2/Cyclin B by Swe1 to condition entry into mitosis to the formation of a bud. Taking inspiration in the ODE model published by Ciliberto et al.","tags":null,"title":"Morphogenetic checkpoint of the budding yeast cell cycle","uri":"/models/2009-budding-yeast-morphogenetic-checkpoint/"},{"content":"This model is an extension of the seminal model of the G1/S restriction point control of mammalian cell cycle, published by Fauré et al [1] . We used model-checking and computing tree logics (CTL) to progressively refine Fauré\u0026rsquo;s model in order to fit recent experimental observations. The resulting model accounts for the sequential activation of cyclins, the role of Skp2, and emphasizes a multifunctional role for the cell cycle inhibitor Rb. We provide GINsim and SBML versions of the original multivalued model as well as of a Boolean translation.\nFurthermore, we provide a script containing the main NuSMV queries used in the article describing the methodology and the resulting revised model.\n","id":66,"section":"models","summary":"This model is an extension of the seminal model of the G1/S restriction point control of mammalian cell cycle, published by Fauré et al [1] . We used model-checking and computing tree logics (CTL) to progressively refine Fauré\u0026rsquo;s model in order to fit recent experimental observations.","tags":null,"title":"Multilevel mammalian cell cycle model","uri":"/models/2016-mammal-cell-cycle/"},{"content":"Relationships between genetic alterations, such as co-occurrence or mutual exclusivity, are often observed in cancer, where their understanding may provide new insights into etiology and clinical management. In this study, we combined statistical analyses and computational modelling to explain patterns of genetic alterations seen in 178 patients with bladder tumours (either muscle-invasive or non-muscle-invasive). A statistical analysis on frequently altered genes identified pair associations including co-occurrence or mutual exclusivity. Focusing on genetic alterations of protein-coding genes involved in growth factor receptor signalling, cell cycle and apoptosis entry, we complemented this analysis with a literature search to focus on nine pairs of genetic alterations of our dataset, with subsequent verification in three other datasets available publically. To understand the reasons and contexts of these patterns of associations while accounting for the dynamics of associated signalling pathways, we built a logical model. This model was validated first on published mutant mice data, then used to study patterns and to draw conclusions on counter-intuitive observations, allowing one to formulate predictions about conditions where combining genetic alterations benefits tumorigenesis. For example, while CDKN2A homozygous deletions occur in a context of FGFR3 activating mutations, our model suggests that additional PIK3CA mutation or p21CIP deletion would greatly favour invasiveness. Further, the model sheds light on the temporal orders of gene alterations, for example, showing how mutual exclusivity of FGFR3 and TP53 mutations is interpretable if FGFR3 is mutated first. Overall, our work shows how to predict combinations of the major gene alterations leading to invasiveness.\n","id":67,"section":"models","summary":"Relationships between genetic alterations, such as co-occurrence or mutual exclusivity, are often observed in cancer, where their understanding may provide new insights into etiology and clinical management. In this study, we combined statistical analyses and computational modelling to explain patterns of genetic alterations seen in 178 patients with bladder tumours (either muscle-invasive or non-muscle-invasive).","tags":null,"title":"Mutually exclusive and co-occurring genetic alterations in bladder tumorigenesis","uri":"/models/2015-mammal-bladder-tumorigenesis/"},{"content":"zhang et al. defined a logical model of the T-LGL survival signaling network to investigate the signaling components that determine the survival of CTL in T-LGL leukemia.\n","id":68,"section":"models","summary":"zhang et al. defined a logical model of the T-LGL survival signaling network to investigate the signaling components that determine the survival of CTL in T-LGL leukemia.","tags":null,"title":"Network model of survival signaling in large granular lymphocyte leukemia (Zhang et al 2008)","uri":"/models/2008-mammal-survival-tlgl-leukemia/"},{"content":"The dynamics of logical regulatory graphs can be described using a NuSMV specification. In GINsim, this specification is created through an export functionality capable of generating a symbolic description of the logical model specified in GINsim.\nAdditionally, it is capable of describing different updating policies for the generation of the successors, such as synchronous, asynchronous and priority classes.\nFinally, it tries to address the space problem of the state representation by annotating the information regarding the input variables on edges instead of states (making use of ARCTL), and by (optionally) defining output variables as simple macro functions.\nSymbolic representation Each variable is declared under the VARsection together with the corresponding range of values (domain). The order of the declaration of variables is of extreme importance since it influences the construction of the internal BDD representing the whole dynamics.\nThe initialization of a set of variables is performed by using the INITkeyword followed by an assignment of a value to a given variable. Alternatively, a macro can be defined with a conjunction of variable valuations and simply use the macro name with the INITkeyword.\nThe rules concerning the computation of the target value of a given variable are described under the ASSIGNsection, using the next(Var) := \u0026hellip;;form.\nThe computation of the focal point is declared under the DEFINEsection, where the actual logical rules referencing all the regulatory components are declared.\nIn this section it is also declared all the macros to be used in the property specifications, such as weak and strong stable states, the list of initial conditions defined by the user, or the output variables which (if specified) do not participate in the state characterization.\nUpdating policies In this export, all of the possible updating policies synchronous/asynchronous are considered as being special cases of the priority classes:\n Asynchronous updating is represented as having one priority class per variable ([VarA] [VarB] \u0026hellip; [VarZ]), with the restriction of a single class update per successor. Synchronous updating is represented as having one single priority class containing all of the variables ([VarA VarB \u0026hellip; VarZ]), where all of the variables in the class are called to change their value in the (single) successor.  State representation There are three main types of variables characterizing a state: state variables, which are declared under the VARsection; output variables, which (if specified by the \u0026ldquo;Strip outputs\u0026rdquo; option) are declared as macros under the DEFINEsection; and the input variables, which are declared under the IVARsection.\nState variables are the ones characterizing an internal state in NuSMV, so, whenever one of the state variables is called to change, a new successor is (might be) created. Output variables are the ones that are not critical for the state characterization, and whose values can be computed through state variables alone. Output variables can still be referenced with a temporal operator in a property specification though. Input variables are always projected over transitions rather then the state. Between a state and its successor, a transition contains all the valid input valuations, i.e., if a given input valuation does not permit to follow a given transition is will be not represented over that transition.\nMacros representing state restrictions The NuSMV export will always automatically compute the model stable states and insert them in the NuSMV model description. Every stableStateis either a weakSSor a strongSS, and each one of these can be composed by several ones, depending on the model. The user, can then use each of these macro names for the specification of properties, from a general one stableStateto a more specific one strongSS.\nAdditionally, when exporting a model, the user can define and select state restrictions on the internal components or on the input components. Only the ones that are checked will be written on the NuSMV specification. Similarly, the names given to each of these state restrictions will correspond to macro names which can be used in the specification of properties.\nTemporal logic property specification This NuSMV specification of the logical model, does not include any property specifications. It is up to the userto encode them at the end of the NuSMV specification file. Again, in any given property, the user can always use the stableStateor the initialStateListmacros previously defined. In order to aid the user in such task, the following example reachability properties are added, as comments, at the end of each file.\n-------------------------------------------------- -- Reachability Properties using VARYING INPUTS -- -- i.e. there is NO CONTROL on the input change at each transition -- -- 1. Between an initial state (pattern) and a stable state (pattern) -- a. Existence of at least one path connecting two state patterns -- INIT initState; -- SPEC EF ( stableState ); -- b. Existence of all the paths connecting two state patterns -- INIT initState; -- SPEC AF ( stableState ); -- -- 2. Between all the weak/strong stable states -- INIT weakSS1; -- SPEC EF ( weakSS2 ); -- ... -- SPEC EF ( weakSSn ); -------------------------------------------------- -- Reachability Properties using FIXED INPUTS -- -- i.e. a VALUE RESTRICTION can be forced at each transition -- -- 1. Between an initial state (pattern) and a stable state (pattern) -- a. Existence of at least one path connecting two state patterns -- INIT initState; SPEC EAF ( inpVar1=0 \u0026amp;amp; inpVar3=1 )( stableState ); -- b. Existence of all the paths -- INIT initState; SPEC AAF ( inpVar1=0 \u0026amp;amp; inpVar3=1 )( stableState ); -- -- 2. Testing input combinations -- INIT weakSS1; -- SPEC EAF ( inpVar1=0 \u0026amp;amp; inpVar2=0 )( weakSS2 ); -- SPEC EAF ( inpVar1=0 \u0026amp;amp; inpVar2=1 )( weakSS2 ); -- SPEC EAF ( inpVar1=1 \u0026amp;amp; inpVar2=0 )( weakSS2 ); -- SPEC EAF ( inpVar1=1 \u0026amp;amp; inpVar2=1 )( weakSS2 ); -- ... Availability and further reading This export was implemented in GINsim 3.0. Further information is available in [1] .\n","id":69,"section":"doc","summary":"Export regulatory graphs for the NuSMV model checker","tags":null,"title":"NuSMV Export","uri":"/doc/formats/model/nusmv/"},{"content":"This model is a refined version of the logical model of the p53-mdm2 network described in Fig. 5a of the supporting publication.\nThe regulatory graph describes the interactions between protein p53, the ubiquitin ligase Mdm2 in its nuclear and cytoplasmic forms, and DNA damage. It relies on biological data taken from literature.\nIn short, the nuclear component of Mdm2 down-regulates the level of active p53. This occurs both by accelerating p53 degradation through ubiquitination and by blocking the transcriptional activity of p53.\nProtein p53 plays a dual role. It activates the expression of Mdm2 thereby up- regulating the level of cytoplasmic Mdm2, and down-regulates the level of nuclear Mdm2 by inhibiting Mdm2 nuclear translocation through inactivation of the kinase Akt.\nDNA damage has a negative influence on the level of nuclear Mdm2, by accelerating its degradation through ATM-mediated phosphorylation and auto- ubiquitination.\nDamage-induced Mdm2 destabilization enables p53 to accumulate and remain active.\nFinally, high levels of p53 promote damage repair by inducing the synthesis of DNA repair proteins.\n","id":70,"section":"models","summary":"This model is a refined version of the logical model of the p53-mdm2 network described in Fig. 5a of the supporting publication.\nThe regulatory graph describes the interactions between protein p53, the ubiquitin ligase Mdm2 in its nuclear and cytoplasmic forms, and DNA damage.","tags":null,"title":"p53-Mdm2 network involved in DNA repair","uri":"/models/2009-mammal-p53-mdm2/"},{"content":"GINsim facilitates the definition of perturbations to define small changes to the regulation of components in regulatory graphs. A perturbation is a set of restrictions on the evolution of the activity level of one or several components.\nUsing Perturbations Some tools, notably Simulation and Stable state search, include a perturbation selection panel to apply a perturbation before running.\nDefinition of Perturbations Perturbation can be defined using the following configuration panel. The panel appears upon activation of the configure button in the perturbation selection panel.\n  Perturbation definition panelThis edition panel considers two types of perturbations: simple perturbations which only affect the activity of a single component, and multiple perturbations which group together a list of simple perturbations.\n  Simple Perturbations The perturbation definition panel appears on the top-right part of the dialog above when no simple perturbation is selected, or when clicking the + button. To create a perturbation, one must first select the affected component using the combobox. The restriction configuration panel will then appear, and the perturbation can be added using the create button.\nThe activity level of Boolean components can be fixed at 0 or at 1, corresponding to the definition of a knockdown or ectopic activity respectively. Radio buttons allows to choose between these two possibilities.\nMulti-valued components offer more possibilities, that can be configured using a range slider. Their activity level will be restricted in the selected range, or completely fixed if the range corresponds to a single value.\n  Perturbation creation panelsTODO: add multivalued figure figures/mvaluedperturbation.png\n  This enables the definition of simple perturbations where the activity level of a component is restricted to the selected value(s).\nThe definition of more subtle perturbations (conditional knockouts\u0026hellip;) still requires the modifications of the logical parameters. We plan to add convenient means to define other types of perturbations in the future. Simple perturbations can not be duplicated: when trying to add a simple perturbation that is already defined, nothing will happen. Multiple Perturbations The bottom part of the panel lists multiple perturbations. Multiple perturbations can be created by selecting several simple perturbation and clicking the button which appears in the information panel. These perturbations can then be ordered and deleted using the buttons on the right side.\nDeleting a simple perturbation will also remove all the multiple perturbations using it. ","id":71,"section":"doc","summary":"Define perturbations of regulatory graphs","tags":null,"title":"Perturbations","uri":"/doc/modify/perturbation/"},{"content":"Regulatory graphs can be exported into discrete Petri net using the rewriting method described in [1] .\nIn the \u0026ldquo;File -\u0026gt; Export\u0026rdquo; menu, a \u0026ldquo;Petri Net\u0026rdquo; submenu permits to choose one of three supported Petri net representations: INA, PNML and APNN. Choosing any of these representations, opens a configuration dialog box which presents a list of options to be considered in the export. These include modifications such as model perturbations or reductions, or the definition of a set of initial states.\n  The Petri Net export dialogThe Petri Net export dialog box allows to select the export format, the initial markup and the mutant to apply before exporting. The initial markup can be generated from an existing initial state of the model (modifications made in this dialog are also applied to the simulation settings); only the first selected state is used.\n  TODO: update figure!\n","id":72,"section":"doc","summary":"Export LRG as Petri net","tags":null,"title":"Petri net Export","uri":"/doc/formats/model/petri-net/petri-net/"},{"content":"This logical model assembles the current knowledge on the regulation of primary sex determination in chicken. Relying on experimental data, a gene network was constructed, leading to a logical model that integrates both the Z-dosage and dominant W hypotheses. The model showed that the sexual fate of chicken gonads results from the resolution of the mutual inhibition between DMRT1 and FOXL2; the initial amount of DMRT1 product determines the development of the gonads. In this respect, the W-factor functions at the initiation step as a second device, by reducing the amount of DMRT1 in ZW gonads when the sexual fate of the gonad is settled; i.e. when SOX9 functional state is determined. Developmental constraints that are instrumental in this resolution were identified. These constraints correspond to qualitative restrictions regarding the relative transcription rates of the genes DMRT1, FOXL2 and HEMGN. The model further clarified the role of oestrogen in maintaining FOXL2 function during ovary development.\n","id":73,"section":"models","summary":"This logical model assembles the current knowledge on the regulation of primary sex determination in chicken. Relying on experimental data, a gene network was constructed, leading to a logical model that integrates both the Z-dosage and dominant W hypotheses.","tags":null,"title":"Primary sex determination of chicken gonads","uri":"/models/2018-bird-sex-determination/"},{"content":"Background Primary sex determination in placental mammals is a very well studied developmental process. Here, we aim to investigate the currently established scenario and to assess its adequacy to fully recover the observed phenotypes, in the wild type and perturbed situations. Computational modelling allows clarifying network dynamics, elucidating crucial temporal constrains as well as interplay between core regulatory modules.\nResults Relying on a comprehensive revision of the literature, we define a logical model that integrates the current knowledge of the regulatory network controlling this developmental process. Our analysis indicates the necessity for some genes to operate at distinct functional thresholds and for specific developmental conditions to ensure the reproducibility of the sexual pathways followed by bi-potential gonads developing into either testes or ovaries. Our model thus allows studying the dynamics of wild type and mutant XX and XY gonads. Furthermore, the model analysis reveals that the gonad sexual fate results from the operation of two sub-networks associated respectively with an initiation and a maintenance phases. At the core of the process is the resolution of two connected feedback loops: the mutual inhibition of Sox9 and ß-catenin at the initiation phase, which in turn affects the mutual inhibition between Dmrt1 and Foxl2, at the maintenance phase. Three developmental signals related to the temporal activity of those sub-networks are required: a signal that determines Sry activation, marking the beginning of the initiation phase, and two further signals that define the transition from the initiation to the maintenance phases, by inhibiting the Wnt4 signalling pathway on the one hand, and by activating Foxl2 on the other hand.\nConclusions Our model reproduces a wide range of experimental data reported for the development of wild type and mutant gonads. It also provides a formal support to crucial aspects of the gonad sexual development and predicts gonadal phenotypes for mutations not tested yet.\n","id":74,"section":"models","summary":"Background Primary sex determination in placental mammals is a very well studied developmental process. Here, we aim to investigate the currently established scenario and to assess its adequacy to fully recover the observed phenotypes, in the wild type and perturbed situations.","tags":null,"title":"Primary sex determination of placental mammals","uri":"/models/2016-mammal-sex-determination/"},{"content":"When a new graph is generated (for example after a simulation or after computing the graph of the strongly connected components), the user can choose to display it with the default layout, directly specify a layout on display, to select and apply one of the available tools, to save it or to export it to another format. The What to do dialog box allows to select among these possibilities.\n  The Processing the New Grah dialog box   For state transition graphs, the number of stable states appears at the top-right corner, which can be visualized by clicking on the \u0026ldquo;View\u0026rdquo; button.\nClicking on the OK button performs the selected action. This dialog box remains available to perform different actions on the graph. This dialog is closed when the graph is displayed, as all actions can then be performed through the Tools menu of the GINsim window.\nVery small graphs will be opened directly in a new GINsim window with a simple layout. ","id":75,"section":"doc","summary":"What to do with a new graph","tags":null,"title":"Processing a new graph","uri":"/doc/gui/whattodo/"},{"content":"On the basis of a previous modelling study by Novak and Tyson [1] , we have recently proposed a generic Boolean model of the core network controlling the restriction point of the mammalian cell cycle.\nFor proper logical parameter values, the simulation of this Boolean model leads to dynamical behaviours (sequences of activations and inactivations of key regulatory products) in qualitative agreement with current experimental data.\nHowever, as kinetic details are still lacking, many different (in)activation pathways are compatible with existing data, including fully synchronous transition pathways. To further evaluate these different possibilities, we have analysed the asymptotical behaviour of this network under synchronous versus asynchronous updating assumptions. Furthermore, we consider intermediate updating strategies to improve the computation of asymptotical properties depending on available kinetic data. This approach has been implemented through user-defined priority classes in the logical modelling and simulation software GINsim.\nThe Figure 1 presents the regulatory graph corresponding to our Boolean model of the restriction point control for the mammalian cell cycle. In this graph, each node represents the activity of a key regulatory element, whereas the edges represent functional interactions between these elements. Blunt arrows stand for inhibitory effects, whereas normal arrows stand for activations.\nFigure 1: Regulatory graph\nDepending on CycD activity at the initial state, our model can lead to two different asymptotical behaviour:\nTo illustrate the impact of the updating assumption, we present here the cyclic attractors (terminal, maximal, strongly connected components) corresponding to three different updating assumptions:\nFigure 2: attractors, depending on the updating policy (Node order in the state labelling: CycD Rb E2F CycE CycA p27Kip1 Cdc20 Cdh1 UbcH10 CycB)\n","id":76,"section":"models","summary":"On the basis of a previous modelling study by Novak and Tyson [1] , we have recently proposed a generic Boolean model of the core network controlling the restriction point of the mammalian cell cycle.","tags":null,"title":"Restriction point control of the mammalian cell cycle","uri":"/models/2006-mammal-cell-cycle/"},{"content":"The model reversal tool constructs a model in which the asynchronous successors of a state correspond to it\u0026rsquo;s predecessors in the original model.\nMultivalued models are supported through model booleanization, with some further transformations to prevent the introduction of non-admissible successor states.\nUsage The model reversal tool is available in the Actions menu.\nAvailability and further reading This method was implemented in GINsim 3.0. The backend is implemented in BioLQM \u0026lt;http://colomoto.org/biolqm\u0026gt;_, enabling its programmatic use.\n","id":77,"section":"doc","summary":"Compute a LRG generating the reversed asynchronous dynamics","tags":null,"title":"Reversal","uri":"/doc/modify/reversal/"},{"content":"TODO:\n link to the bioLQM API link to the CoLoMoTo notebook Some extra scripting features in GINsim  ","id":78,"section":"doc","summary":"Perform automated analysis","tags":null,"title":"Scripting GINsim","uri":"/doc/more/script/"},{"content":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","id":79,"section":"","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.","tags":null,"title":"Search Results","uri":"/search/"},{"content":"Initially activated by the pair-rule genes, the expression patterns of the segment polarity genes engrailed and wingless become consolidated through inter-cellular interactions between juxtaposed cells. Here, we delineate a logical model focusing on a dozen molecular components at the core of the regulatory network controlling this process. Our model analysis leads to the following conclusions:\n the pair-rule signals, which activate engrailed and wingless genes independently of each other, need to be operative until the inter-cellular circuit involving these two genes is functional. This implies that the pair-rule pattern is instrumental both in determining the activation of the genes engrailed and wingless in rows of adjacent cells, and in consolidating these expression patterns. The consolidation of engrailed and wingless expression patterns requires the proper activation of both autocrine and paracrine Wingless-pathways, as well as the full activation of the Hedgehog pathway. Protein kinase A plays at least two roles through the phosphorylation of Cubitus interruptus, the effector molecule of the Hedgehog signalling pathway. The roles of Sloppy-paired and Naked in the delineation of the engrailed and wingless expression domains are emphasized as being important for segmental boundary formation. Moreover, the application of an original computational method leads to the delineation of a subset of crucial regulatory circuits enabling the coexistence of specific expression states at the cellular level, as well as specific combination of cellular states inter-connected through Wingless and Hedgehog signalling.  Finally, the simulation of altered expressions of segment polarity genes leads to results consistent with the published data concerning loss-of-function mutants and ectopic gene expressions. Moreover, this model makes predictions about genetic interactions that can be tested by further experiments.\n","id":80,"section":"models","summary":"Initially activated by the pair-rule genes, the expression patterns of the segment polarity genes engrailed and wingless become consolidated through inter-cellular interactions between juxtaposed cells. Here, we delineate a logical model focusing on a dozen molecular components at the core of the regulatory network controlling this process.","tags":null,"title":"Segment polarity module (Sánchez et al. 2008)","uri":"/models/2008-drosophila-segment-polarity/"},{"content":"Background DNA damage (single or double-strand breaks) triggers adapted cellular responses. These responses are elicited through signalling pathways, which activate cell cycle checkpoints and basically lead to three cellular fates: cycle arrest promoting DNA repair, senescence (permanent arrest) or cell death. Cellular senescence is known for having a tumour-suppressive function and its regulation arouses a growing scientific interest. Here, we advance a qualitative model covering DNA damage response pathways, focusing on G1/S checkpoint enforcement, supposedly more sensitive to arrest than G2/M checkpoint.\nResults We define a discrete, logical model encompassing ATM (ataxia telangiectasia mutated) and ATR (ATM and Rad3-related) pathways activation upon DNA damage, as well as G1/S checkpoint main components. It also includes the stress responsive protein p38MAPK (mitogen-activated protein kinase 14) known to be involved in the regulation of senescence. The model has four outcomes that convey alternative cell fates: proliferation, (transient) cell cycle arrest, apoptosis and senescence. Different levels of DNA damage are considered, defined by distinct combinations of single and double-strand breaks. Each leads to a single stable state denoting the cell fate adopted upon this specific damage. A range of model perturbations corresponding to gene loss-of- function or gain-of-function is compared to experimental mutations.\nConclusions As a step towards an integrative model of DNA-damage response pathways to better cover the onset of senescence, our model focuses on G1/S checkpoint enforcement. This model qualitatively agrees with most experimental observations, including experiments involving mutations. Furthermore, it provides some predictions.\n","id":81,"section":"models","summary":"Background DNA damage (single or double-strand breaks) triggers adapted cellular responses. These responses are elicited through signalling pathways, which activate cell cycle checkpoints and basically lead to three cellular fates: cycle arrest promoting DNA repair, senescence (permanent arrest) or cell death.","tags":null,"title":"Senescence onset at the G1/S cell cycle checkpoint","uri":"/models/2014-mammal-senescence/"},{"content":"The vulva of Caenorhabditis elegans has been long used as an experimental model of cell differentiation and organogenesis. While it is known that the signaling cascades of Wnt, Ras/MAPK, and NOTCH interact to form a molecular network, there is no consensus regarding its precise topology and dynamical properties. We inferred the molecular network, and developed a multivalued synchronous discrete dynamic model to study its behavior. The model reproduces the patterns of activation reported for the following types of cell: vulval precursor, first fate, second fate, second fate with reversed polarity, third fate, and fusion fate. We simulated the fusion of cells, the determination of the first, second, and third fates, as well as the transition from the second to the first fate. We also used the model to simulate all possible single loss- and gain-of-function mutants, as well as some relevant double and triple mutants. Importantly, we associated most of these simulated mutants to multivulva, vulvaless, egg-laying defective, or defective polarity phenotypes. The model shows that it is necessary for RAL-1 to activate NOTCH signaling, since the repression of LIN-45 by RAL-1 would not suffice for a proper second fate determination in an environment lacking DSL ligands. We also found that the model requires the complex formed by LAG-1, LIN-12, and SEL-8 to inhibit the transcription of eff-1 in second fate cells. Our model is the largest reconstruction to date of the molecular network controlling the specification of vulval precursor cells and cell fusion control in C. elegans. According to our model, the process of fate determination in the vulval precursor cells is reversible, at least until either the cells fuse with the ventral hypoderm or divide, and therefore the cell fates must be maintained by the presence of extracellular signals.\n","id":82,"section":"models","summary":"The vulva of Caenorhabditis elegans has been long used as an experimental model of cell differentiation and organogenesis. While it is known that the signaling cascades of Wnt, Ras/MAPK, and NOTCH interact to form a molecular network, there is no consensus regarding its precise topology and dynamical properties.","tags":null,"title":"Specification of vulval precursor cells and cell fusion control in C. elegans","uri":"/models/2013-celegans-vulval-precursor/"},{"content":"A Strongly Connected Component (SCC) in a graph is a maximal subgraph such that all its components are strongly connected. Each SCC can either a single node or a set of intertwined cycles of the original graph. The SCC graph is a derived graph in which each node represent one of the SCC of the original graph.\tThis acyclic graph provides a simplified representation of the organisation of the original graph. This graph is thus often much more compact.\nIn GINsim, the graph of the Strongly Connected Components (SCC graph) is often used to provide a better understanding of the organisation of the attractors in a State Transition Graph. The computation of the SCC graph can be launched through the Construct SCC graph option of the Tools menu. Note that GINsim also provides the Hierarchical Transition Graph dedicated to this problem.\n  Strongly Connected Components graphExample of Strongly Connected Component Graph (bottom right) and the corresponding state transition graph (top left). The Selection Attribute tab in the bottom panel shows the content of the selected SCC (i.e. the list of nodes in the original graph).\n  Note that while the Construct SCC Graph tool is often applied to State Transition Graph, it can also be applied to Regulatory Graphs (or more formally to any type of graphs).\nExtract from SCC graph After computing the SCC graph, another tool enables to recover the subgraph of the original graph corresponding to the selected nodes in the SCC graph.\nTo use it, select some nodes in a SCC graph and run the Extract subgraph action from the Graph menu.\nThis tool will open the original graph, and apply a filter to only keep the selected parts. To work properly it thus requires that the original graph had been saved to a file, and that the association between the SCC graph and the original graph (maintained by GINsim transparently) is still valid.\n","id":83,"section":"doc","summary":"Compute the Strongly Connected Components Graph","tags":null,"title":"Strongly Connected Components","uri":"/doc/analyse_tg/scc/"},{"content":"The Style tab in the secondary window allows to change the visual properties of the graph elements.\nGINsim uses styles to define visual properties of graph elements, in particular their color and shape. A style is a group of properties that can be applied to several elements. Nodes and edges have separate lists of styles.\nThe position of nodes, and the path followed by edges can be defined directly in the interactive view\nNode styles   Graphical attributes for nodes     Default attributes for nodes   Edge styles   Graphical attributes for arcs   Style manager   Style Manager   ","id":84,"section":"doc","summary":"Define and edit visual styles","tags":null,"title":"Styling graphs","uri":"/doc/gui/styles/"},{"content":"This comprehensive model integrates the available data on T cell activation, taking into account CTLA4 and PD-1 checkpoint inhibitory pathways. It encompasses 216 components and 451 regulatory arcs.\nTo ease the verification of the behaviour of this large logical model, we have designed a modular approach based on a unit testing framework used in software development. Furthermore, to compare the respective impact of the activation of the two checkpoints, we have designed a value propagation technique enabling the analytical computation of all the nodes frozen following the persisting activation or inhibition of any model component. The model verification approach greatly eased the delineation of logical rules complying with predefined dynamical specifications, while the use of the value propagation technique provided interesting insights into the differential potential of CTLA4 and PD-1 immunotherapies.\nAll our analyses have been implemented into two python notebooks, enabling their reproduction or extension with the most recent version of the CoLoMoTo Docker image (http://www.colomoto.org/notebook).\n","id":85,"section":"models","summary":"This comprehensive model integrates the available data on T cell activation, taking into account CTLA4 and PD-1 checkpoint inhibitory pathways. It encompasses 216 components and 451 regulatory arcs.\nTo ease the verification of the behaviour of this large logical model, we have designed a modular approach based on a unit testing framework used in software development.","tags":null,"title":"T cells response to CTLA4 and PD-1 checkpoint inhibitors","uri":"/models/2020-mammal-tcell-checkpoint-inhibitors/"},{"content":"This page describes the analysis of a model of Th differentiation and plasticity .\nThe model encompasses 20 signaling pathways, a dozen of transcription factors, and about 30 cytokines, amounting to 101 components in total.\nIt is composed by several layers, namely:\n the cytokine inputs along with the Antigen Presenting Cells (APC); the cytokine receptors and their subchains, along with the T cell receptor (TCR) and the co-stimulatory receptor CD28; the intracellular signaling factors, including \u0026ldquo;Stat\u0026rdquo; family proteins (Stat1, Stat3, Stat4, Stat5, Stat6), the TCR and co-stimulatory signaling components (NFAT, IκB, NFκB), the master regulators (Tbet, Gata3, Rorγt, Foxp3, Bcl6), along with additional transcription factors involved in Th differentiation (cMaf, PU.1, Smad3, IRF1, Runx3); the main cytokines secreted by Th cells; a component modeling the proliferation of the cell.  Model analysis To reproduce the model analysis results:\n open the T-helper cell full model with GINsim, and perform the strict reduction using the already selected components to be reduced; perform a stable state analysis to obtain the 82 context-dependent stable states; export the reduced model to NuSMV format; specify the properties, used in the manuscript, at the end of the NuSMV model specification file; download the NuSMV-ARCTL model checker (an extension of NuSMV which supports the verification of ARCTL temporal formulas); perform the verification of the NuSMV model specification file.  NuSMV only supports the simultaneous verification of multiple properties if and only if they all share the same (set of) initial state(s). It is therefore advisable to specify as many NuSMV model specification files, as the number of different (set of) initial state(s).\nNuSMV specification file example As an example, we provide a NuSMV specification file for the T-helper cell reduced model, containing properties specified as ARCTL formulas at the end. These ARCTL formulas correspond to instantiation of the generic property 1, specified in section 3.3 of the main manuscript:\nINIT c1; EAF(e)(c2 ∧ AAG(e)(c2)),\nwhere c1 corresponds to the definition of the cell type Th0, c2 (e) corresponds to all the possible Th patterns (input conditions) defined in Table 2 (Table 3) of the main manuscript. Meaning that it will test the reachability of all Th patterns under all input conditions from the Th0 cell type.\nDownload the NuSMV specification file.\nBuilding the reprogramming graph Once the NuSMV specification files for all Th subtypes (Th0, Th1, Th2, Tfh, Th9, Th17, Th22 and Treg) are generated, with the corresponding ARCTL properties, one should run NuSMV-ARCTL for each of the Th subtypes file.\nOne can then build a reprogramming graph, where the Th subtypes represent the nodes, and the ARCTL properties that are evaluated as true represent the authorized transitions.\nIn Figure 3 of the manuscript, we represent this reprogramming graph with labels on the transitions, indicating which input conditions were present for the verification of each specific reachability property.\nThe representation of the graph in Figure 3 of the manuscript was done using Tikz. In alternative we could have used Graphviz or other similar software.\n","id":86,"section":"suppl","summary":"Model checking to assess Th plasticity","tags":null,"title":"T-helper cell plasticity","uri":"/suppl/th-plasticity-2014/"},{"content":"We have applied the logical modelling framework to the regulatory network controlling T-lymphocyte specification. This process involves cross- regulations between specific T-cell regulatory factors with factors driving alternative differentiation pathways, which remain accessible during the early steps of thymocyte development. Many transcription factors needed for T-cell specification are required in other hematopoietic differentiation pathways, and are combined in a fine-tuned, time-dependent fashion to achieve T-cell commitment.\nUsing the software GINsim, we integrated current knowledge into a dynamical model, which recapitulates the main developmental steps from early progenitors entering the thymus up to T-cell commitment, as well as the impact of various documented environmental and genetic perturbations. Our model analysis further enabled the identification of several knowledge gaps.\n","id":87,"section":"models","summary":"We have applied the logical modelling framework to the regulatory network controlling T-lymphocyte specification. This process involves cross- regulations between specific T-cell regulatory factors with factors driving alternative differentiation pathways, which remain accessible during the early steps of thymocyte development.","tags":null,"title":"T-lymphocyte specification","uri":"/models/2019-mammal-tcell-specification/"},{"content":"CD4+ T cells recognize antigens through their T cell receptors TCR). However, additional signals involving co-stimulatory receptors, for example CD28, are required for proper T cell activation. Alternative co-stimulatory receptors have been proposed, including members of the Toll-like receptor family, such as TLR5 and TLR2.\nWe report here three Boolean models for:\n the T cell receptor (TCR) signalling pathway; the Toll-like receptor (TLR5) signalling pathway; the combination of TCR and TLR5 pathway, taking into accounting cross-interactions.  These models were validated by analysing the responses of T cells to the activation of these pathways alone or in combination, in terms of CREB, c-Jun and p65 activation. The resulting merged model accurately reproduces the experimental results, showing that the activation of TLR5 can play a similar role to that of CD28, regarding AP-1, CREB and NF-кB activation, thereby, providing insights regarding the cross-regulation of these pathways in CD4+ T cells.\n","id":88,"section":"models","summary":"CD4+ T cells recognize antigens through their T cell receptors TCR). However, additional signals involving co-stimulatory receptors, for example CD28, are required for proper T cell activation. Alternative co-stimulatory receptors have been proposed, including members of the Toll-like receptor family, such as TLR5 and TLR2.","tags":null,"title":"TCR and TLR5 merged Boolean model","uri":"/models/2018-mammal-tcr-tlr5/"},{"content":"This Boolean model of the TCR signalling pathway, encompassing 40 regulatory components, is based on the work of Klamt et al.. In this version of the model, an auto-regulation has been added on each input.\nThis model has been studied in [1] , using novel algorithms for the analysis of feedback circuits and the determination of stable states. The stable state analysis shows seven stable states, listed bellow. Each stable state corresponds to a different input combination, except \u0026ldquo;111\u0026rdquo;. Indeed, the systems shows an oscilatory behaviour under full activation.\nThe feedback circuit analysis shows nine circuits, besides the three auto- activation on the inputs. Only one of these circuits is functional: (ZAP70, cCbl). This negative circuit is functional in presence of LCK and TCRphos which can only be maintained in presence of the three inputs. This circuit drives the oscillatory behaviour observed under full activation.\n","id":89,"section":"models","summary":"This Boolean model of the TCR signalling pathway, encompassing 40 regulatory components, is based on the work of Klamt et al.. In this version of the model, an auto-regulation has been added on each input.","tags":null,"title":"TCR signalisation","uri":"/models/2006-mammal-tcell-activation/"},{"content":"The Hedgehog (Hh) signalling pathway plays a crucial role in animal embryonic and organ development. In the wing imaginal disc of Drosophila melanogaster, Hh is induced and diffuses from the posterior compartment to activate the corresponding pathway in cells immediately anterior to the boundary. In these boundary cells, the Hh gradient induces target genes in distinct domains as a function of the Hh concentration. One Hh target is its own receptor Patched (Ptc), which sequesters Hh and impedes further diffusion, thereby refining the boundary.\nWe have delineated a multivalued logical model of the patterning process defining the cellular anterior-posterior boundary that includes the formation of Hh gradient and Hh signalling transduction. This model accounts for the activation of Hh target genes mediated by positive (CiA) and negative (CiR) regulatory products of the gene cubitus interruptus (ci). Wild-type and mutant simulations are carried out to assess the coherence of the model with experimental data and to obtain biological insights into this fundamental process.\nIn addition to recapitulating experimental data, our logical analysis leads to the delineation of three crucial features. First, CiA should be present in all boundary cells. Second, Ptc is regulated by CiA, but also tentatively by CiR. Third, the model predicts that Engrailed acts at different functional levels in boundary and posterior cells.\n","id":90,"section":"models","summary":"The Hedgehog (Hh) signalling pathway plays a crucial role in animal embryonic and organ development. In the wing imaginal disc of Drosophila melanogaster, Hh is induced and diffuses from the posterior compartment to activate the corresponding pathway in cells immediately anterior to the boundary.","tags":null,"title":"The Anterior-Posterior Boundary (Gonzalez et al. 2008)","uri":"/models/2008-drosophila-ap-boundary/"},{"content":" \u0026lt;p\u0026gt;The regulatory graph can additionally be exported into different formats.\u0026lt;/p\u0026gt; \u0026lt;/item\u0026gt; \u0026lt;item\u0026gt;\u0026lt;title\u0026gt;Quit\u0026lt;/title\u0026gt;\u0026lt;p\u0026gt;close all graphs and exit the GINsim application.\u0026lt;/p\u0026gt;\u0026lt;/item\u0026gt; \u0026lt;/terms\u0026gt; \u0026lt;p\u0026gt;Some of these actions (\u0026lt;em\u0026gt;New\u0026lt;/em\u0026gt;, \u0026lt;em\u0026gt;Open\u0026lt;/em\u0026gt; and \u0026lt;em\u0026gt;Save\u0026lt;/em\u0026gt;) are also available from the toolbar. \u0026lt;/p\u0026gt;  TODO: replace this all with a short note and point to the relevant index pages?","id":91,"section":"doc","summary":"View and edit graphs, launch actions","tags":null,"title":"The main window","uri":"/doc/gui/main-window/"},{"content":"This manuscript reports a dynamical analysis of the pair-rule cross-regulatory module controlling segmentation in Drosophila melanogaster. We propose a logical model accounting for the ability of the pair-rule module to determine the formation of alternate juxtaposed Engrailed- and Wingless-expressing cells that form the (para)segmental boundaries. This module has the intrinsic capacity to generate four distinct expression states, each characterized by the expression of a particular combination of pair-rule genes or expression mode. The selection of one of these expression modes depends on the maternal and gap inputs, but also crucially on cross-regulations among pair-rule genes. The latter are instrumental in the interpretation of the maternal-gap pre-pattern. Our logical model allows the qualitative reproduction of the patterns of pair-rule gene expressions corresponding to the wild type situation, to loss-of-function and cis-regulatory mutations, and to ectopic pair-rule expressions. Furthermore, this model provides a formal explanation for the morphogenetic role of the initial bell-shaped expression of the gene even-skipped, i.e. for the distinct effects of different levels of the Even-skipped protein on its target pair-rule genes. It also accounts for the requirement of Even-skipped for the formation of all Engrailed-stripes. Finally, it provides new insights into the roles and evolutionary origins of the apparent redundancies in the regulatory architecture of the pair-rule module.\n","id":92,"section":"models","summary":"This manuscript reports a dynamical analysis of the pair-rule cross-regulatory module controlling segmentation in Drosophila melanogaster. We propose a logical model accounting for the ability of the pair-rule module to determine the formation of alternate juxtaposed Engrailed- and Wingless-expressing cells that form the (para)segmental boundaries.","tags":null,"title":"The pair-rule cross-regulatory module","uri":"/models/2003-drosophila-pair-rule/"},{"content":"Once a regulatory model has been defined, a simulation can be launched through the Run Simulation option of the Action menu. This option triggers a dialog box allowing to choose simulation settings.\n  Simulation settingsThis dialog box allows to configure and run the simulation.\n  This dialog box allows to define simulation settings. The top part of the dialog box enables the definition of transformations to apply to the regulatory graph before the simulation. The left part of the dialog box enables to manage (select, add or remove) simulations settings. The right part of the dialog box enables the definition of the current simulation setting.\nConfigure the simulation The top part of the simulation dialog enables the selection of a perturbation to be applied to the regulatory graph before running the simulation. The associated Configure button will show the :doc:perturbation definition panel \u0026lt;/modify/perturbation\u0026gt;.\nThe bottom part of the dialog box is dedicated to the definition of :doc:initial_states of the simulation. Each row defines a single state or a group of states, and the checkboxes allow to select the states used for the simulation. If no row is selected, all possible states are considered, generating a complete state transition graph.\nIn a given state of the system, one or several genes are called to update their values. When several changes are pending, different construction strategies lead to different successor states and thus to different state transition graphs. GINsim implements the classical synchronousand asynchronousupdating, and enables the definition of ad hoc strategies using priority classes. These updating modes are described in detail in their documentation.\nSimulation settings are saved and restored as associated data in ZGINML files.\nRunning simulations with perturbation   Perturbation simulation resultResult of an asynchronous simulation, where the expression level for Cro has been blocked at 1. The state transition graph is the same as the original asynchronous one, but all transitions where Cro leaves this value have been suppressed. This state transition graph is now composed of two disconnected parts, with a new stable state.\n  The \u0026ldquo;strip output\u0026rdquo; checkbox next to the perturbation selector enables to activate automatic removal of all output components from the simulation. Their value can be retrieved on demand when browsing the resulting State Transition Graph. See the reductionsection for more details.\nThe \u0026ldquo;Construction Strategy\u0026rdquo; panel enables the selection of the type of graph computed by the simulation (the classical State Transition Graph, or the more compact Hierarchical Transition Graph).\nState Transition Graphs can be computed breadth-first or depth-first. Both options lead to the same result, unless the simulation is interrupted by a size limit(see below).\nDepth and size limitations An option is also offered to limit the search depth and/or the total number of states generated in a simulation.\nWhen considering several initial states (or the full STG), some of them can be reached while running the simulation from an other state. In this case, no new search will be triggered for them and the depth counter will not be reinitialised (i.e. the depth limit for these initial states will be shorter).   Limitation of the depth in the case of a depth first constructionState transition graph with all reachable states from the state \u0026ldquo;0111\u0026rdquo;. The same simulation with a depth limit set to 2 keeps only the initial state and the nodes at a distance of two or less (i.e. the six white states).\n  The limit on the total number of states apply to all simulation modes. Under the asynchronous assumption, this limit has slightly different effects on depth first and breadth first search.\n  Running the simulation While the simulation is running, the bottom left corner indicates the size of the generated state transition graph. The simulation can be interrupted, using the Cancel button, without loosing the calculated part of the state transition graph.\nAt the end of a simulation, several options are available to save, display or analyse the resulting state transition graph (see ).\n","id":93,"section":"doc","summary":"Generate Transition Graphs","tags":null,"title":"The simulation","uri":"/doc/simulation/simulation/"},{"content":"The Z-GINML format (also denoted extended save), is a zip archive containing a ginml file along with companion files to store associated data, especially initial states, perturbations, and simulation parameters. More generally, each plugin can provide a parser and file writer to store its associated data in a Z-GINML file.\nThe GINML format is an extension of the GXL (Graph eXchange Language) format. This extension comprises new attributes and subelements for elements node and edge, and an additional element called parameter.\nSee the GINML\u0026rsquo;s dtd or in pdf format See also the GINML description of the gap-gene network case A, or in pdf format.\nTODO: described stored associated data Some companion data can be associated to the graphs to store the configuration of various tools. Some of this extra data can be shared between several tools. This extra data is stored in its own entry inside ZGINML files.\n","id":94,"section":"doc","summary":"The native file format in GINsim","tags":null,"title":"The Z-GINML format","uri":"/doc/formats/zginml/"},{"content":"State Transition Graphs A State Transition Graph (STG) is a directed graph representing the dynamical behaviour of a Logical Regulatory Graph. Nodes of this graph represent possible states of the model, assigning a value to each component. Arcs of the STG represent transitions from one state to another (i.e. change of value for one or several components).\nFor a more formal definition see [1] .\nHierarchical Transition Graphs The Hierarchical Transition Graphs (HTG) is an acyclic graph, which provides a compact representation of the State Transition Graph. It improves on the graph of the Strongly Connected Components by merging linear chains of states (in addition to cycles) into single nodes.\nMore information on this graph is available in [ 2 ] .\n","id":95,"section":"doc","summary":"Graphs representing the dynamical behaviour","tags":null,"title":"Transition graphs","uri":"/doc/simulation/transition_graphs/"},{"content":"This tool allows the analytic (i.e. without running a simulation) determination of trapspaces of the model. These trapspaces contain the stable states, as well as an approximation for complex attractors [1] .\nUsage This tool is available from the Trapspace option of the Tools menu.\n  Availability Trapspace identification was first implemented in GINsim 3.0, relying on the bioLQM toolkit.\n","id":96,"section":"doc","summary":"Identify stable motifs containing complex attractors","tags":null,"title":"Trapspaces","uri":"/doc/static_analysis/trapspaces/"},{"content":"Get in touch Some common issues are listed below, if you can not find a solution, please contact the GINsim team or send a message to the user support forum, describing your problem and steps to reproduce it. As some problems are difficult to reproduce, you may be asked to provide log traces (using the GINsim/support/export log traces menu entry) and to launch GINsim from the command line to catch additional error messages.\nCommon quirks Input nodes In GINsim, some nodes can be defined as input nodes using a checkbox in the node property panel. These input nodes can not have any incoming interaction or dynamical rule as they have an implicit rule allowing them to always maintain their current activity level. Before setting a node as input, the modeller must thus remove all existing regulator or rule. Likewise, the input status must be removed before adding any new regulator or rule. To delete a logical formula, select it (without editing it) and use the delete key or the contextual menu.\nUnexpected dynamical results If you obtain unexpected dynamical results (stable states or simulations results), verify successively the structure of the regulatory graph, the maximal activity levels of all components, the thresholds of interactions coming out of multi-valued components and then the dynamical rules. GINsim further provides a tool to compute interaction functionality, which facilitates the identification of inconsistencies between the structure of the regulatory graph and the dynamical rules.\nGUI refresh issues Some refreshing problems may appear after long or complex modeling sessions, saving and restarting GINsim can solve some issues.\n","id":97,"section":"doc","summary":"Debug problems","tags":null,"title":"Troubleshooting","uri":"/doc/more/troubleshooting/"},{"content":"In a given state of the system, one or several genes are called to update their values. When several changes are pending, different construction strategies lead to different successor states and thus to different state transition graphs.\nSynchronous mode In this mode, all updating calls are performed simultaneously. This simplification may generate artefacts in the state transition graph.\nEach state has then at most one successor state, which encompasses fully updated gene levels.\nAsynchronous mode In this mode, all changes are performed independantly. It will generate a state transition graph taking into account any possible trajectories. This mode is chosen by default.\nA given state may have several successor states, each of them corresponding to a single updating of one gene level.\nIn this mode, the graph transition state can be generated \u0026ldquo;depth first\u0026rdquo; or \u0026ldquo;breadth first\u0026rdquo;. The same state transition graph will be built, except if interrupted (for illustration, see :doc:depth and size limitation \u0026lt;simulation\u0026gt;).\n  Construction strategy: synchronous versus asynchronousSamples of simulation results for the lambda4 model, applying asynchronous and synchronous strategies to the same initial states (all states where C1=0 and Cro\u0026gt;0). Dotted arcs denote multiple, simultaneous transitions.\n  Priority classes This strategy allows the user to group components into different classes, and to assign a priority level to each of these classes. In case of concurrent transition calls, GINsim first updates the gene(s) belonging to the class with the highest ranking. For each class, the user can further specify the desired updating assumption, which then determines the treatment of concurrent transition calls inside that class. When several classes have the same ranking, concurrent transitions are treated under an asynchronous assumption (no priority).\nThe creation of a new configuration, using the leftmost \u0026ldquo;+\u0026rdquo; button, starts wth some predefined settings:\n The definition of a single class contaning all components, equivalent to the (a)synchronous updating. The definition of a fully-ordered updating using a separate class for each component. The separation of the increasing and decreasing transition of each components for more fine-grained configurations.  The left part of the configuration dialog box shows a list of priority classes (see figure below). The name of a class can be edited and a checkbox allows to change its internal mode from asynchronous (unchecked) to synchronous (checked). Buttons enable to add (+), delete (X), order (using the arrows) and group/ungroup priority classes.\nThe central column lists transitions that belong to the currently selected class, while the column on the right displays all other transitions (i.e. belonging to other classes). To add transitions to the selected class, choose them in the right list an click on the \u0026ldquo;\u0026lt;\u0026lt;\u0026rdquo; button. The \u0026gt;\u0026gt; button removes the transition selected in the central list from the current class and add them to the next class in the list (to the first class when the last one is selected).\nWhen multiple classes are selected, they can be assigned the same rank. Multiple classes with the same rank are treated asynchronously: if all classes are asynchronous, it is thus equivalent to a single larger class, but it allows the definition of asynchronous update of multiple synchronous classes as well.\n  Definition of Priority classes     Priority Class: example resultExample of simulation by priority classes. Two priority classes have been created. The highest ranked one is synchronous and contains C1, C2 and Cro. The other class contains only N. The resulting state transition graph is splited into two parts: N expressed versus N not expressed.\n  ","id":98,"section":"doc","summary":"Updating modes for the simulation","tags":null,"title":"Updating modes","uri":"/doc/simulation/updatings/"},{"content":"Upon launch, GINsim will present the Welcome dialog box below.\n  The Welcome dialog shown on startup   The New model action will create a new Regulatory Graph, while the Open and Import buttons allow to select an existing file in a supported format. The Recent files section allows the quick selection of a previously opened file. For all these actions, the selected graph will be opened in a Main Window.\nClosing this dialog or activating the quit button will stop GINsim.\nThis dialog is also shown after closing the last window (Ctrl/Cmd-W). Use the Quit (Ctrl/Cmd-Q) action to skip it. When running GINsim on the command line, it is possible to provide a file to open or to ask for a new model. In this case, the welcome dialog will not be shown. See the run options. ","id":99,"section":"doc","summary":"The welcome dialog","tags":null,"title":"Welcome dialog","uri":"/doc/gui/welcome/"}]